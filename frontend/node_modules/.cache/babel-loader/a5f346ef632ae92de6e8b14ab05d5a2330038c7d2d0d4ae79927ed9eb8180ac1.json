{"ast":null,"code":"// Complete Sentari OS Server - Fully Updated with Unlimited AI Module Builder\n// This includes: Aetheris AI, Sticky AI Editor, Unlimited Module Generation, Code Preservation\n\nconst express = require('express');\nconst EnhancedAetherisArchitect = require('./aetheris.js');\nconst VigilisSecurity = require('./vigilis.js');\nconst SentariCompanion = require('./companion.js');\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// UNLIMITED AI MODULE TEMPLATE SYSTEM - COMPLETE AND WORKING\nconst ModuleTemplateSystem = {\n  templates: {\n    'data_list': {\n      name: 'Data List Module',\n      description: 'Manage any type of records with CRUD operations',\n      generates: ['database_schema', 'api_routes', 'react_component'],\n      examples: ['Employee Directory', 'Equipment Inventory', 'Client Database']\n    },\n    'report_dashboard': {\n      name: 'Report Dashboard',\n      description: 'Custom reports with charts, filters, and exports',\n      generates: ['report_queries', 'chart_components', 'export_functions'],\n      examples: ['Financial Reports', 'Performance Analytics', 'Compliance Reports']\n    },\n    'asset_tracker': {\n      name: 'Asset Tracker',\n      description: 'Track physical or digital assets with maintenance',\n      generates: ['asset_database', 'maintenance_scheduler', 'depreciation_calculator'],\n      examples: ['Equipment Management', 'Vehicle Fleet', 'IT Assets']\n    },\n    'approval_workflow': {\n      name: 'Approval Workflow',\n      description: 'Multi-step approval processes with notifications',\n      generates: ['workflow_engine', 'approval_interface', 'notification_system'],\n      examples: ['Purchase Approvals', 'Leave Requests', 'Document Reviews']\n    }\n  },\n  async generateModule(userRequest, existingModules = []) {\n    try {\n      console.log('🧠 AI analyzing request:', userRequest);\n      const analysis = this.parseRequest(userRequest);\n      const selectedTemplate = this.selectBestTemplate(analysis);\n      const moduleSpec = await this.createModuleSpec(analysis, selectedTemplate);\n      const generatedCode = await this.generateCode(moduleSpec);\n      return {\n        success: true,\n        moduleName: moduleSpec.name,\n        moduleId: moduleSpec.id,\n        template: selectedTemplate.name,\n        specification: moduleSpec,\n        code: generatedCode,\n        deploymentInstructions: this.generateDeploymentInstructions(moduleSpec)\n      };\n    } catch (error) {\n      console.error('❌ Module generation failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        suggestions: this.getSuggestions(userRequest)\n      };\n    }\n  },\n  parseRequest(request) {\n    const r = request.toLowerCase();\n    if (r.includes('inventory') || r.includes('asset') || r.includes('equipment')) {\n      return {\n        purpose: 'Track and manage physical assets',\n        entities: ['equipment', 'inventory', 'assets'],\n        templateType: 'asset_tracker'\n      };\n    }\n    if (r.includes('report') || r.includes('analytics') || r.includes('dashboard')) {\n      return {\n        purpose: 'Generate reports and analytics',\n        entities: ['reports', 'analytics', 'data'],\n        templateType: 'report_dashboard'\n      };\n    }\n    if (r.includes('approval') || r.includes('workflow')) {\n      return {\n        purpose: 'Manage approval workflows',\n        entities: ['approvals', 'requests', 'workflows'],\n        templateType: 'approval_workflow'\n      };\n    }\n    return {\n      purpose: 'Manage business data and records',\n      entities: ['records', 'data'],\n      templateType: 'data_list'\n    };\n  },\n  selectBestTemplate(analysis) {\n    const templateType = analysis.templateType || 'data_list';\n    return this.templates[templateType];\n  },\n  async createModuleSpec(analysis, template) {\n    const moduleName = this.generateModuleName(analysis);\n    const moduleId = moduleName.toLowerCase().replace(/\\s+/g, '-');\n    return {\n      id: moduleId,\n      name: moduleName,\n      description: `${analysis.purpose} - AI generated module`,\n      template: template.name,\n      entities: analysis.entities\n    };\n  },\n  generateModuleName(analysis) {\n    const {\n      entities,\n      purpose\n    } = analysis;\n    if (purpose.includes('report')) {\n      return `${entities[0] || 'Business'} Reports`.replace(/s Reports/, ' Reports');\n    }\n    if (purpose.includes('asset') || purpose.includes('inventory')) {\n      return `${entities[0] || 'Asset'} Management`.replace(/s Management/, ' Management');\n    }\n    if (purpose.includes('approval')) {\n      return `${entities[0] || 'Request'} Workflow`.replace(/s Workflow/, ' Workflow');\n    }\n    return `${entities[0] || 'Data'} Management`.replace(/s Management/, ' Management');\n  },\n  async generateCode(moduleSpec) {\n    return {\n      database: this.generateDatabaseCode(moduleSpec),\n      api: this.generateAPICode(moduleSpec),\n      component: this.generateReactComponent(moduleSpec),\n      navigation: this.generateNavigationUpdate(moduleSpec)\n    };\n  },\n  generateDatabaseCode(spec) {\n    const entityName = spec.entities[0] || 'record';\n    const tableName = `${entityName.toLowerCase()}s`;\n    return `-- ${spec.name} Database Schema\nCREATE TABLE ${tableName} (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  description TEXT,\n  status VARCHAR(50) DEFAULT 'active',\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  created_by INTEGER\n);\n\nCREATE INDEX idx_${tableName}_status ON ${tableName}(status);\nCREATE INDEX idx_${tableName}_created ON ${tableName}(created_at);`;\n  },\n  generateAPICode(spec) {\n    const entityName = spec.entities[0] || 'record';\n    const tableName = `${entityName.toLowerCase()}s`;\n    return `// ${spec.name} API Routes\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/${tableName}', async (req, res) => {\n  // Get all ${entityName}s\n  res.json({ ${tableName}: [], message: 'AI Generated API endpoint' });\n});\n\nrouter.post('/${tableName}', async (req, res) => {\n  // Create new ${entityName}\n  res.json({ success: true, message: '${entityName} created' });\n});\n\nmodule.exports = router;`;\n  },\n  generateReactComponent(spec) {\n    const componentName = spec.name.replace(/\\s+/g, '');\n    return `// ${spec.name} Component - AI Generated\nimport React, { useState, useEffect } from 'react';\n\nconst ${componentName} = () => {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h2 style={{ color: '#2563eb' }}>${spec.name}</h2>\n      <div style={{\n        background: 'rgba(59, 130, 246, 0.1)',\n        border: '1px solid rgba(59, 130, 246, 0.3)',\n        borderRadius: '12px',\n        padding: '20px'\n      }}>\n        <h3 style={{ color: '#3b82f6' }}>AI Generated Module</h3>\n        <p style={{ color: '#94a3b8' }}>\n          ${spec.description}\n        </p>\n        <div style={{\n          background: 'rgba(139, 92, 246, 0.1)',\n          border: '1px solid rgba(139, 92, 246, 0.2)',\n          borderRadius: '8px',\n          padding: '10px',\n          marginTop: '15px'\n        }}>\n          <div style={{ color: '#8b5cf6', fontSize: '12px', fontWeight: 'bold' }}>\n            🤖 Template: ${spec.template}\n          </div>\n          <div style={{ color: '#94a3b8', fontSize: '11px', marginTop: '5px' }}>\n            This module was automatically generated by AI based on your requirements.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ${componentName};`;\n  },\n  generateNavigationUpdate(moduleSpec) {\n    return `// Add to navigation: ${moduleSpec.name}`;\n  },\n  generateDeploymentInstructions(moduleSpec) {\n    return `Generated ${moduleSpec.name} with database, API, and React component`;\n  },\n  getSuggestions(request) {\n    return [\"Try: 'I need an inventory management system'\", \"Try: 'Create a report dashboard'\", \"Try: 'Build an approval workflow'\", \"Try: 'Add equipment tracking'\"];\n  }\n};\nconst app = express();\n\n// Basic middleware\napp.use(express.json());\n\n// CORS middleware\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\n// Initialize Enhanced Aetheris Master Architect\nconsole.log('🌟 Initializing Enhanced Aetheris Master Architect...');\nconst aetheris = new EnhancedAetherisArchitect('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');\n\n// Initialize Companion and Vigilis\nconst companion = new SentariCompanion(aetheris);\nconst vigilis = new VigilisSecurity();\n\n// PLATFORM MODULE MANAGEMENT\nlet platformModules = [{\n  id: 'guard-management',\n  name: 'Guard Management',\n  type: 'core',\n  status: 'active',\n  description: 'Manage security guards, shifts, and assignments',\n  lastModified: new Date().toISOString()\n}, {\n  id: 'nurse-management',\n  name: 'Nurse Management',\n  type: 'core',\n  status: 'archived',\n  description: 'Manage nurses, shifts, and patient assignments',\n  lastModified: new Date().toISOString()\n}, {\n  id: 'gps-tracking',\n  name: 'GPS Tracking',\n  type: 'feature',\n  status: 'active',\n  description: 'Real-time GPS tracking for field personnel',\n  lastModified: new Date().toISOString()\n}, {\n  id: 'site-management',\n  name: 'Site Management',\n  type: 'core',\n  status: 'active',\n  description: 'Manage client sites and locations',\n  lastModified: new Date().toISOString()\n}, {\n  id: 'scheduling',\n  name: 'AI Scheduling',\n  type: 'core',\n  status: 'active',\n  description: 'Intelligent scheduling with conflict detection',\n  lastModified: new Date().toISOString()\n}, {\n  id: 'analytics',\n  name: 'Business Intelligence',\n  type: 'feature',\n  status: 'active',\n  description: 'KPIs, charts, and performance analytics',\n  lastModified: new Date().toISOString()\n}];\nlet archivedModules = [];\n\n// SENTARI BRAND CONFIGURATION\nconst SENTARI_BRAND = {\n  name: \"Sentari OS\",\n  tagline: \"Orchestrating Intelligence. Predicting Outcomes.\",\n  version: \"1.0\",\n  aiEngine: \"Aetheris Enhanced\",\n  cores: 12\n};\n\n// Welcome route\napp.get('/', (req, res) => {\n  res.json({\n    message: `🚀 ${SENTARI_BRAND.name} - AI Operating System`,\n    tagline: SENTARI_BRAND.tagline,\n    status: 'Running Successfully!',\n    aiEngine: SENTARI_BRAND.aiEngine,\n    aiCores: SENTARI_BRAND.cores,\n    timestamp: new Date()\n  });\n});\n\n// Health check\napp.get('/api/health', (req, res) => {\n  res.json({\n    system: SENTARI_BRAND.name,\n    status: 'Operational',\n    aiEngine: 'Aetheris Enhanced Online',\n    cores: aetheris.cores.size\n  });\n});\n\n// Aetheris Enhanced Guidance\napp.post('/api/aetheris/guide', async (req, res) => {\n  try {\n    const {\n      userId,\n      issue,\n      userRole,\n      companyContext\n    } = req.body;\n    console.log(`🧭 ${userRole || 'User'} ${userId} seeking Aetheris guidance: ${issue}`);\n    const guidance = await aetheris.provideEnhancedGuidance(userId, issue);\n    if (userRole) {\n      await companion.provideRoleAwareGuidance(userId, userRole, issue, guidance);\n    }\n    res.json({\n      ...guidance,\n      system: 'Sentari OS',\n      engine: 'Aetheris Predictive Intelligence',\n      userRole: userRole || 'General User'\n    });\n  } catch (error) {\n    console.error('❌ Aetheris guidance failed:', error.message);\n    res.status(500).json({\n      error: 'Guidance system temporarily unavailable',\n      details: error.message,\n      fallback: 'Try specific module guidance or contact support'\n    });\n  }\n});\n\n// Aetheris Status\napp.get('/api/aetheris/status', (req, res) => {\n  try {\n    res.json(aetheris.getEnhancedSystemStatus());\n  } catch (error) {\n    res.status(500).json({\n      error: 'Status check failed'\n    });\n  }\n});\n\n// AI Cores status\napp.get('/api/aetheris/cores', (req, res) => {\n  try {\n    const coreStatus = Array.from(aetheris.cores.entries()).map(([id, core]) => ({\n      id,\n      name: core.definition.name,\n      role: core.definition.role,\n      health: core.health,\n      lastActivity: core.lastActivity\n    }));\n    res.json({\n      cores: coreStatus,\n      totalCores: aetheris.cores.size\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Core status failed'\n    });\n  }\n});\n\n// AI PLATFORM EDITOR\napp.post('/api/ai/edit-platform', async (req, res) => {\n  try {\n    const {\n      prompt,\n      currentModules,\n      timestamp\n    } = req.body;\n    console.log('🧠 AI Editor Request:', prompt);\n    const analysisResult = analyzePromptFallback(prompt);\n    const response = generateAIResponse(analysisResult, prompt);\n    res.json({\n      success: true,\n      response: response,\n      action: analysisResult,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('❌ AI Editor Error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'AI Editor temporarily unavailable',\n      fallback: 'Please try rephrasing your request'\n    });\n  }\n});\n\n// EXECUTE PLATFORM CHANGES\napp.post('/api/ai/execute-change', async (req, res) => {\n  try {\n    const {\n      action,\n      moduleData\n    } = req.body;\n    console.log('🔧 Executing platform change:', action.action);\n    let result;\n    switch (action.action) {\n      case 'replace_module':\n        result = await replaceModule(action.sourceModule, action.targetModule);\n        break;\n      case 'remove_module':\n        result = await removeModule(action.moduleId);\n        break;\n      case 'add_module':\n        result = await addModule(action.moduleName, action.moduleSpec);\n        break;\n      case 'restore_module':\n        result = await restoreModule(action.moduleId);\n        break;\n      default:\n        throw new Error(`Unknown action: ${action.action}`);\n    }\n    res.json({\n      success: true,\n      result: result,\n      updatedModules: platformModules.filter(m => m.status === 'active'),\n      archivedModules: archivedModules\n    });\n  } catch (error) {\n    console.error('❌ Change execution failed:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// UNLIMITED MODULE BUILDER\napp.post('/api/ai/build-custom-module', async (req, res) => {\n  try {\n    const {\n      userRequest,\n      existingModules\n    } = req.body;\n    console.log('🏗️ AI Module Builder Request:', userRequest);\n    const result = await ModuleTemplateSystem.generateModule(userRequest, existingModules);\n    if (result.success) {\n      platformModules.push({\n        id: result.moduleId,\n        name: result.moduleName,\n        type: 'custom',\n        status: 'active',\n        description: result.specification.description,\n        template: result.template,\n        specification: result.specification,\n        code: result.code,\n        createdBy: 'AI Builder',\n        createdAt: new Date().toISOString()\n      });\n      console.log(`✅ Generated custom module: ${result.moduleName}`);\n    }\n    res.json(result);\n  } catch (error) {\n    console.error('❌ Custom module generation failed:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// GET CURRENT PLATFORM STATE\napp.get('/api/platform/modules', (req, res) => {\n  res.json({\n    activeModules: platformModules.filter(m => m.status === 'active'),\n    archivedModules: archivedModules,\n    totalModules: platformModules.length\n  });\n});\n\n// HELPER FUNCTIONS\nfunction analyzePromptFallback(prompt) {\n  const p = prompt.toLowerCase();\n  if ((p.includes('replace') || p.includes('change')) && p.includes('guard') && p.includes('nurse')) {\n    return {\n      action: 'replace_module',\n      sourceModule: 'Guard Management',\n      targetModule: 'Nurse Management',\n      reasoning: 'User wants to replace guard management with nurse management for hospital operations',\n      impactDescription: 'Platform will switch from security operations to healthcare operations',\n      confidence: 90\n    };\n  }\n  if (p.includes('remove') && (p.includes('guard') || p.includes('gps'))) {\n    return {\n      action: 'remove_module',\n      moduleId: p.includes('gps') ? 'gps-tracking' : 'guard-management',\n      reasoning: 'User wants to remove module functionality',\n      confidence: 85\n    };\n  }\n  return {\n    action: 'help',\n    reasoning: 'Could not determine specific action from prompt',\n    suggestions: ['Try: \"Replace guard management with nurse management\"'],\n    confidence: 50\n  };\n}\nfunction generateAIResponse(analysis, originalPrompt) {\n  const {\n    action,\n    confidence\n  } = analysis;\n  switch (action) {\n    case 'replace_module':\n      return `🧠 **AI Analysis**: I understand you want to replace ${analysis.sourceModule} with ${analysis.targetModule}.\n\n**Action Plan:**\n✅ Archive ${analysis.sourceModule} with all code and data\n✅ Activate ${analysis.targetModule} module\n✅ Update navigation and dashboard\n✅ Preserve all existing data for potential rollback\n\n**Impact Assessment:**\n${analysis.impactDescription}\n\n**Confidence:** ${confidence}%\n\n**Ready to proceed?** Click Apply to make this change.`;\n    case 'remove_module':\n      return `🧠 **AI Analysis**: I'll remove the specified module and archive it safely.\n\n**Action Plan:**  \n✅ Remove module from active navigation\n✅ Archive all code and database schemas\n✅ Preserve data for potential restoration\n✅ Update related dashboards and reports\n\n**The module can be restored anytime if needed.**\n\n**Confidence:** ${confidence}%`;\n    default:\n      return `🧠 **AI Analysis**: I'm analyzing your request: \"${originalPrompt}\"\n\n**I can help you:**\n• **Replace modules:** \"Replace guard management with nurse management\"\n• **Remove features:** \"Remove GPS tracking module\"\n• **Add functionality:** \"Add vendor management system\"\n• **Restore archived:** \"Bring back the scheduling module\"\n\n**What specific changes would you like me to make?**`;\n  }\n}\nasync function replaceModule(sourceModule, targetModule) {\n  try {\n    console.log(`🔄 Replacing ${sourceModule} with ${targetModule}`);\n    const sourceIdx = platformModules.findIndex(m => m.name === sourceModule);\n    const targetIdx = platformModules.findIndex(m => m.name === targetModule);\n    if (sourceIdx === -1) {\n      throw new Error(`Source module ${sourceModule} not found`);\n    }\n    const archivedModule = {\n      ...platformModules[sourceIdx]\n    };\n    archivedModule.status = 'archived';\n    archivedModule.archivedAt = new Date().toISOString();\n    archivedModule.archivedReason = `Replaced with ${targetModule}`;\n    archivedModules.push(archivedModule);\n    if (targetIdx !== -1) {\n      platformModules[targetIdx].status = 'active';\n      platformModules[targetIdx].lastModified = new Date().toISOString();\n      platformModules.splice(sourceIdx, 1);\n    } else {\n      const newModule = await generateNewModule(targetModule);\n      platformModules[sourceIdx] = newModule;\n    }\n    return {\n      success: true,\n      message: `Successfully replaced ${sourceModule} with ${targetModule}`,\n      archivedModule: archivedModule,\n      newModule: platformModules.find(m => m.name === targetModule)\n    };\n  } catch (error) {\n    console.error('❌ Module replacement failed:', error);\n    throw error;\n  }\n}\nasync function generateNewModule(moduleName) {\n  const moduleId = moduleName.toLowerCase().replace(/\\s+/g, '-');\n  const moduleTemplates = {\n    'Nurse Management': {\n      id: 'nurse-management',\n      name: 'Nurse Management',\n      type: 'core',\n      status: 'active',\n      description: 'Manage nurses, shifts, patient assignments, and medical compliance',\n      features: ['Nurse scheduling', 'Patient assignments', 'Shift rotations', 'Certification tracking']\n    },\n    'Vendor Management': {\n      id: 'vendor-management',\n      name: 'Vendor Management',\n      type: 'feature',\n      status: 'active',\n      description: 'Manage vendors, contractor employees, and payment distribution',\n      features: ['Vendor profiles', 'Employee scheduling', 'Payment processing', 'Performance tracking']\n    }\n  };\n  const template = moduleTemplates[moduleName] || {\n    id: moduleId,\n    name: moduleName,\n    type: 'feature',\n    status: 'active',\n    description: `AI-generated ${moduleName} module`,\n    features: ['Core functionality', 'Data management', 'Reporting']\n  };\n  template.lastModified = new Date().toISOString();\n  template.createdBy = 'AI Editor';\n  return template;\n}\nasync function removeModule(moduleId) {\n  const moduleIdx = platformModules.findIndex(m => m.id === moduleId);\n  if (moduleIdx === -1) {\n    throw new Error(`Module ${moduleId} not found`);\n  }\n  const module = platformModules[moduleIdx];\n  module.status = 'archived';\n  module.archivedAt = new Date().toISOString();\n  archivedModules.push({\n    ...module\n  });\n  platformModules.splice(moduleIdx, 1);\n  return {\n    success: true,\n    message: `${module.name} archived successfully`\n  };\n}\nasync function addModule(moduleName, moduleSpec) {\n  try {\n    const newModule = {\n      id: moduleName.toLowerCase().replace(/\\s+/g, '-'),\n      name: moduleName,\n      type: 'custom',\n      status: 'active',\n      description: `AI-generated ${moduleName} module`,\n      createdBy: 'AI Builder',\n      createdAt: new Date().toISOString()\n    };\n    platformModules.push(newModule);\n    return {\n      success: true,\n      message: `${moduleName} created successfully`,\n      module: newModule\n    };\n  } catch (error) {\n    throw error;\n  }\n}\nasync function restoreModule(moduleId) {\n  const archivedIdx = archivedModules.findIndex(m => m.id === moduleId);\n  if (archivedIdx === -1) {\n    throw new Error(`Archived module ${moduleId} not found`);\n  }\n  const module = archivedModules[archivedIdx];\n  module.status = 'active';\n  module.lastModified = new Date().toISOString();\n  delete module.archivedAt;\n  delete module.archivedReason;\n  platformModules.push({\n    ...module\n  });\n  archivedModules.splice(archivedIdx, 1);\n  return {\n    success: true,\n    message: `${module.name} restored successfully`\n  };\n}\nconst port = 3000;\napp.listen(port, () => {\n  console.log('🚀 Sentari OS running on port ' + port);\n});\nconsole.log('🧠 Aetheris: 12 AI cores coordinating intelligence');\nconsole.log('🛡️ Vigilis: Guardian layer protecting all operations');\nconsole.log('🎓 Companion: Training assistant ready for role-aware guidance');\nconsole.log('🤖 Unlimited AI Module Builder System loaded');\nconsole.log('📊 Available Templates:', Object.keys(ModuleTemplateSystem.templates).length);\nconsole.log('✨ Sentari OS is now fully operational!');","map":{"version":3,"names":["express","require","EnhancedAetherisArchitect","VigilisSecurity","SentariCompanion","fs","promises","path","ModuleTemplateSystem","templates","name","description","generates","examples","generateModule","userRequest","existingModules","console","log","analysis","parseRequest","selectedTemplate","selectBestTemplate","moduleSpec","createModuleSpec","generatedCode","generateCode","success","moduleName","moduleId","id","template","specification","code","deploymentInstructions","generateDeploymentInstructions","error","message","suggestions","getSuggestions","request","r","toLowerCase","includes","purpose","entities","templateType","generateModuleName","replace","database","generateDatabaseCode","api","generateAPICode","component","generateReactComponent","navigation","generateNavigationUpdate","spec","entityName","tableName","componentName","app","use","json","req","res","next","header","method","sendStatus","aetheris","companion","vigilis","platformModules","type","status","lastModified","Date","toISOString","archivedModules","SENTARI_BRAND","tagline","version","aiEngine","cores","get","aiCores","timestamp","system","size","post","userId","issue","userRole","companyContext","body","guidance","provideEnhancedGuidance","provideRoleAwareGuidance","engine","details","fallback","getEnhancedSystemStatus","coreStatus","Array","from","entries","map","core","definition","role","health","lastActivity","totalCores","prompt","currentModules","analysisResult","analyzePromptFallback","response","generateAIResponse","action","moduleData","result","replaceModule","sourceModule","targetModule","removeModule","addModule","restoreModule","Error","updatedModules","filter","m","push","createdBy","createdAt","activeModules","totalModules","length","p","reasoning","impactDescription","confidence","originalPrompt","sourceIdx","findIndex","targetIdx","archivedModule","archivedAt","archivedReason","splice","newModule","generateNewModule","find","moduleTemplates","features","moduleIdx","module","archivedIdx","port","listen","Object","keys"],"sources":["C:/Users/onetr/OneDrive/Desktop/universal-business-platform/universal-business-platform/frontend/src/App.js"],"sourcesContent":["// Complete Sentari OS Server - Fully Updated with Unlimited AI Module Builder\r\n// This includes: Aetheris AI, Sticky AI Editor, Unlimited Module Generation, Code Preservation\r\n\r\nconst express = require('express');\r\nconst EnhancedAetherisArchitect = require('./aetheris.js');\r\nconst VigilisSecurity = require('./vigilis.js');\r\nconst SentariCompanion = require('./companion.js');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\n// UNLIMITED AI MODULE TEMPLATE SYSTEM - COMPLETE AND WORKING\r\nconst ModuleTemplateSystem = {\r\n  templates: {\r\n    'data_list': {\r\n      name: 'Data List Module',\r\n      description: 'Manage any type of records with CRUD operations',\r\n      generates: ['database_schema', 'api_routes', 'react_component'],\r\n      examples: ['Employee Directory', 'Equipment Inventory', 'Client Database']\r\n    },\r\n    'report_dashboard': {\r\n      name: 'Report Dashboard', \r\n      description: 'Custom reports with charts, filters, and exports',\r\n      generates: ['report_queries', 'chart_components', 'export_functions'],\r\n      examples: ['Financial Reports', 'Performance Analytics', 'Compliance Reports']\r\n    },\r\n    'asset_tracker': {\r\n      name: 'Asset Tracker',\r\n      description: 'Track physical or digital assets with maintenance',\r\n      generates: ['asset_database', 'maintenance_scheduler', 'depreciation_calculator'],\r\n      examples: ['Equipment Management', 'Vehicle Fleet', 'IT Assets']\r\n    },\r\n    'approval_workflow': {\r\n      name: 'Approval Workflow',\r\n      description: 'Multi-step approval processes with notifications',\r\n      generates: ['workflow_engine', 'approval_interface', 'notification_system'],\r\n      examples: ['Purchase Approvals', 'Leave Requests', 'Document Reviews']\r\n    }\r\n  },\r\n\r\n  async generateModule(userRequest, existingModules = []) {\r\n    try {\r\n      console.log('🧠 AI analyzing request:', userRequest);\r\n      \r\n      const analysis = this.parseRequest(userRequest);\r\n      const selectedTemplate = this.selectBestTemplate(analysis);\r\n      const moduleSpec = await this.createModuleSpec(analysis, selectedTemplate);\r\n      const generatedCode = await this.generateCode(moduleSpec);\r\n      \r\n      return {\r\n        success: true,\r\n        moduleName: moduleSpec.name,\r\n        moduleId: moduleSpec.id,\r\n        template: selectedTemplate.name,\r\n        specification: moduleSpec,\r\n        code: generatedCode,\r\n        deploymentInstructions: this.generateDeploymentInstructions(moduleSpec)\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Module generation failed:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        suggestions: this.getSuggestions(userRequest)\r\n      };\r\n    }\r\n  },\r\n\r\n  parseRequest(request) {\r\n    const r = request.toLowerCase();\r\n    \r\n    if (r.includes('inventory') || r.includes('asset') || r.includes('equipment')) {\r\n      return {\r\n        purpose: 'Track and manage physical assets',\r\n        entities: ['equipment', 'inventory', 'assets'],\r\n        templateType: 'asset_tracker'\r\n      };\r\n    }\r\n    \r\n    if (r.includes('report') || r.includes('analytics') || r.includes('dashboard')) {\r\n      return {\r\n        purpose: 'Generate reports and analytics',\r\n        entities: ['reports', 'analytics', 'data'],\r\n        templateType: 'report_dashboard'\r\n      };\r\n    }\r\n    \r\n    if (r.includes('approval') || r.includes('workflow')) {\r\n      return {\r\n        purpose: 'Manage approval workflows',\r\n        entities: ['approvals', 'requests', 'workflows'],\r\n        templateType: 'approval_workflow'\r\n      };\r\n    }\r\n    \r\n    return {\r\n      purpose: 'Manage business data and records',\r\n      entities: ['records', 'data'],\r\n      templateType: 'data_list'\r\n    };\r\n  },\r\n\r\n  selectBestTemplate(analysis) {\r\n    const templateType = analysis.templateType || 'data_list';\r\n    return this.templates[templateType];\r\n  },\r\n\r\n  async createModuleSpec(analysis, template) {\r\n    const moduleName = this.generateModuleName(analysis);\r\n    const moduleId = moduleName.toLowerCase().replace(/\\s+/g, '-');\r\n    \r\n    return {\r\n      id: moduleId,\r\n      name: moduleName,\r\n      description: `${analysis.purpose} - AI generated module`,\r\n      template: template.name,\r\n      entities: analysis.entities\r\n    };\r\n  },\r\n\r\n  generateModuleName(analysis) {\r\n    const { entities, purpose } = analysis;\r\n    \r\n    if (purpose.includes('report')) {\r\n      return `${entities[0] || 'Business'} Reports`.replace(/s Reports/, ' Reports');\r\n    }\r\n    if (purpose.includes('asset') || purpose.includes('inventory')) {\r\n      return `${entities[0] || 'Asset'} Management`.replace(/s Management/, ' Management');\r\n    }\r\n    if (purpose.includes('approval')) {\r\n      return `${entities[0] || 'Request'} Workflow`.replace(/s Workflow/, ' Workflow');\r\n    }\r\n    \r\n    return `${entities[0] || 'Data'} Management`.replace(/s Management/, ' Management');\r\n  },\r\n\r\n  async generateCode(moduleSpec) {\r\n    return {\r\n      database: this.generateDatabaseCode(moduleSpec),\r\n      api: this.generateAPICode(moduleSpec),\r\n      component: this.generateReactComponent(moduleSpec),\r\n      navigation: this.generateNavigationUpdate(moduleSpec)\r\n    };\r\n  },\r\n\r\n  generateDatabaseCode(spec) {\r\n    const entityName = spec.entities[0] || 'record';\r\n    const tableName = `${entityName.toLowerCase()}s`;\r\n    \r\n    return `-- ${spec.name} Database Schema\r\nCREATE TABLE ${tableName} (\r\n  id SERIAL PRIMARY KEY,\r\n  name VARCHAR(255) NOT NULL,\r\n  description TEXT,\r\n  status VARCHAR(50) DEFAULT 'active',\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  created_by INTEGER\r\n);\r\n\r\nCREATE INDEX idx_${tableName}_status ON ${tableName}(status);\r\nCREATE INDEX idx_${tableName}_created ON ${tableName}(created_at);`;\r\n  },\r\n\r\n  generateAPICode(spec) {\r\n    const entityName = spec.entities[0] || 'record';\r\n    const tableName = `${entityName.toLowerCase()}s`;\r\n    \r\n    return `// ${spec.name} API Routes\r\nconst express = require('express');\r\nconst router = express.Router();\r\n\r\nrouter.get('/${tableName}', async (req, res) => {\r\n  // Get all ${entityName}s\r\n  res.json({ ${tableName}: [], message: 'AI Generated API endpoint' });\r\n});\r\n\r\nrouter.post('/${tableName}', async (req, res) => {\r\n  // Create new ${entityName}\r\n  res.json({ success: true, message: '${entityName} created' });\r\n});\r\n\r\nmodule.exports = router;`;\r\n  },\r\n\r\n  generateReactComponent(spec) {\r\n    const componentName = spec.name.replace(/\\s+/g, '');\r\n    \r\n    return `// ${spec.name} Component - AI Generated\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst ${componentName} = () => {\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2 style={{ color: '#2563eb' }}>${spec.name}</h2>\r\n      <div style={{\r\n        background: 'rgba(59, 130, 246, 0.1)',\r\n        border: '1px solid rgba(59, 130, 246, 0.3)',\r\n        borderRadius: '12px',\r\n        padding: '20px'\r\n      }}>\r\n        <h3 style={{ color: '#3b82f6' }}>AI Generated Module</h3>\r\n        <p style={{ color: '#94a3b8' }}>\r\n          ${spec.description}\r\n        </p>\r\n        <div style={{\r\n          background: 'rgba(139, 92, 246, 0.1)',\r\n          border: '1px solid rgba(139, 92, 246, 0.2)',\r\n          borderRadius: '8px',\r\n          padding: '10px',\r\n          marginTop: '15px'\r\n        }}>\r\n          <div style={{ color: '#8b5cf6', fontSize: '12px', fontWeight: 'bold' }}>\r\n            🤖 Template: ${spec.template}\r\n          </div>\r\n          <div style={{ color: '#94a3b8', fontSize: '11px', marginTop: '5px' }}>\r\n            This module was automatically generated by AI based on your requirements.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ${componentName};`;\r\n  },\r\n\r\n  generateNavigationUpdate(moduleSpec) {\r\n    return `// Add to navigation: ${moduleSpec.name}`;\r\n  },\r\n\r\n  generateDeploymentInstructions(moduleSpec) {\r\n    return `Generated ${moduleSpec.name} with database, API, and React component`;\r\n  },\r\n\r\n  getSuggestions(request) {\r\n    return [\r\n      \"Try: 'I need an inventory management system'\",\r\n      \"Try: 'Create a report dashboard'\", \r\n      \"Try: 'Build an approval workflow'\",\r\n      \"Try: 'Add equipment tracking'\"\r\n    ];\r\n  }\r\n};\r\n\r\nconst app = express();\r\n\r\n// Basic middleware\r\napp.use(express.json());\r\n\r\n// CORS middleware\r\napp.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\r\n  if (req.method === 'OPTIONS') {\r\n    res.sendStatus(200);\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\n// Initialize Enhanced Aetheris Master Architect\r\nconsole.log('🌟 Initializing Enhanced Aetheris Master Architect...');\r\nconst aetheris = new EnhancedAetherisArchitect('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');\r\n\r\n// Initialize Companion and Vigilis\r\nconst companion = new SentariCompanion(aetheris);\r\nconst vigilis = new VigilisSecurity();\r\n\r\n// PLATFORM MODULE MANAGEMENT\r\nlet platformModules = [\r\n  { \r\n    id: 'guard-management', \r\n    name: 'Guard Management', \r\n    type: 'core', \r\n    status: 'active',\r\n    description: 'Manage security guards, shifts, and assignments',\r\n    lastModified: new Date().toISOString()\r\n  },\r\n  { \r\n    id: 'nurse-management', \r\n    name: 'Nurse Management', \r\n    type: 'core', \r\n    status: 'archived',\r\n    description: 'Manage nurses, shifts, and patient assignments',\r\n    lastModified: new Date().toISOString()\r\n  },\r\n  { \r\n    id: 'gps-tracking', \r\n    name: 'GPS Tracking', \r\n    type: 'feature', \r\n    status: 'active',\r\n    description: 'Real-time GPS tracking for field personnel',\r\n    lastModified: new Date().toISOString()\r\n  },\r\n  { \r\n    id: 'site-management', \r\n    name: 'Site Management', \r\n    type: 'core', \r\n    status: 'active',\r\n    description: 'Manage client sites and locations',\r\n    lastModified: new Date().toISOString()\r\n  },\r\n  { \r\n    id: 'scheduling', \r\n    name: 'AI Scheduling', \r\n    type: 'core', \r\n    status: 'active',\r\n    description: 'Intelligent scheduling with conflict detection',\r\n    lastModified: new Date().toISOString()\r\n  },\r\n  { \r\n    id: 'analytics', \r\n    name: 'Business Intelligence', \r\n    type: 'feature', \r\n    status: 'active',\r\n    description: 'KPIs, charts, and performance analytics',\r\n    lastModified: new Date().toISOString()\r\n  }\r\n];\r\n\r\nlet archivedModules = [];\r\n\r\n// SENTARI BRAND CONFIGURATION\r\nconst SENTARI_BRAND = {\r\n  name: \"Sentari OS\",\r\n  tagline: \"Orchestrating Intelligence. Predicting Outcomes.\",\r\n  version: \"1.0\",\r\n  aiEngine: \"Aetheris Enhanced\",\r\n  cores: 12\r\n};\r\n\r\n// Welcome route\r\napp.get('/', (req, res) => {\r\n  res.json({ \r\n    message: `🚀 ${SENTARI_BRAND.name} - AI Operating System`,\r\n    tagline: SENTARI_BRAND.tagline,\r\n    status: 'Running Successfully!',\r\n    aiEngine: SENTARI_BRAND.aiEngine,\r\n    aiCores: SENTARI_BRAND.cores,\r\n    timestamp: new Date()\r\n  });\r\n});\r\n\r\n// Health check\r\napp.get('/api/health', (req, res) => {\r\n  res.json({ \r\n    system: SENTARI_BRAND.name,\r\n    status: 'Operational', \r\n    aiEngine: 'Aetheris Enhanced Online',\r\n    cores: aetheris.cores.size \r\n  });\r\n});\r\n\r\n// Aetheris Enhanced Guidance\r\napp.post('/api/aetheris/guide', async (req, res) => {\r\n  try {\r\n    const { userId, issue, userRole, companyContext } = req.body;\r\n    console.log(`🧭 ${userRole || 'User'} ${userId} seeking Aetheris guidance: ${issue}`);\r\n\r\n    const guidance = await aetheris.provideEnhancedGuidance(userId, issue);\r\n\r\n    if (userRole) {\r\n      await companion.provideRoleAwareGuidance(userId, userRole, issue, guidance);\r\n    }\r\n\r\n    res.json({\r\n      ...guidance,\r\n      system: 'Sentari OS',\r\n      engine: 'Aetheris Predictive Intelligence',\r\n      userRole: userRole || 'General User'\r\n    });\r\n  } catch (error) {\r\n    console.error('❌ Aetheris guidance failed:', error.message);\r\n    res.status(500).json({\r\n      error: 'Guidance system temporarily unavailable',\r\n      details: error.message,\r\n      fallback: 'Try specific module guidance or contact support'\r\n    });\r\n  }\r\n});\r\n\r\n// Aetheris Status\r\napp.get('/api/aetheris/status', (req, res) => {\r\n  try {\r\n    res.json(aetheris.getEnhancedSystemStatus());\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Status check failed' });\r\n  }\r\n});\r\n\r\n// AI Cores status\r\napp.get('/api/aetheris/cores', (req, res) => {\r\n  try {\r\n    const coreStatus = Array.from(aetheris.cores.entries()).map(([id, core]) => ({\r\n      id,\r\n      name: core.definition.name,\r\n      role: core.definition.role,\r\n      health: core.health,\r\n      lastActivity: core.lastActivity\r\n    }));\r\n    res.json({ cores: coreStatus, totalCores: aetheris.cores.size });\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Core status failed' });\r\n  }\r\n});\r\n\r\n// AI PLATFORM EDITOR\r\napp.post('/api/ai/edit-platform', async (req, res) => {\r\n  try {\r\n    const { prompt, currentModules, timestamp } = req.body;\r\n    \r\n    console.log('🧠 AI Editor Request:', prompt);\r\n    \r\n    const analysisResult = analyzePromptFallback(prompt);\r\n    const response = generateAIResponse(analysisResult, prompt);\r\n    \r\n    res.json({\r\n      success: true,\r\n      response: response,\r\n      action: analysisResult,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ AI Editor Error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'AI Editor temporarily unavailable',\r\n      fallback: 'Please try rephrasing your request'\r\n    });\r\n  }\r\n});\r\n\r\n// EXECUTE PLATFORM CHANGES\r\napp.post('/api/ai/execute-change', async (req, res) => {\r\n  try {\r\n    const { action, moduleData } = req.body;\r\n    \r\n    console.log('🔧 Executing platform change:', action.action);\r\n    \r\n    let result;\r\n    \r\n    switch (action.action) {\r\n      case 'replace_module':\r\n        result = await replaceModule(action.sourceModule, action.targetModule);\r\n        break;\r\n      case 'remove_module':\r\n        result = await removeModule(action.moduleId);\r\n        break;\r\n      case 'add_module':\r\n        result = await addModule(action.moduleName, action.moduleSpec);\r\n        break;\r\n      case 'restore_module':\r\n        result = await restoreModule(action.moduleId);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown action: ${action.action}`);\r\n    }\r\n    \r\n    res.json({\r\n      success: true,\r\n      result: result,\r\n      updatedModules: platformModules.filter(m => m.status === 'active'),\r\n      archivedModules: archivedModules\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('❌ Change execution failed:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// UNLIMITED MODULE BUILDER\r\napp.post('/api/ai/build-custom-module', async (req, res) => {\r\n  try {\r\n    const { userRequest, existingModules } = req.body;\r\n    \r\n    console.log('🏗️ AI Module Builder Request:', userRequest);\r\n    \r\n    const result = await ModuleTemplateSystem.generateModule(userRequest, existingModules);\r\n    \r\n    if (result.success) {\r\n      platformModules.push({\r\n        id: result.moduleId,\r\n        name: result.moduleName,\r\n        type: 'custom',\r\n        status: 'active',\r\n        description: result.specification.description,\r\n        template: result.template,\r\n        specification: result.specification,\r\n        code: result.code,\r\n        createdBy: 'AI Builder',\r\n        createdAt: new Date().toISOString()\r\n      });\r\n      \r\n      console.log(`✅ Generated custom module: ${result.moduleName}`);\r\n    }\r\n    \r\n    res.json(result);\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Custom module generation failed:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n\r\n// GET CURRENT PLATFORM STATE\r\napp.get('/api/platform/modules', (req, res) => {\r\n  res.json({\r\n    activeModules: platformModules.filter(m => m.status === 'active'),\r\n    archivedModules: archivedModules,\r\n    totalModules: platformModules.length\r\n  });\r\n});\r\n\r\n// HELPER FUNCTIONS\r\nfunction analyzePromptFallback(prompt) {\r\n  const p = prompt.toLowerCase();\r\n  \r\n  if ((p.includes('replace') || p.includes('change')) && p.includes('guard') && p.includes('nurse')) {\r\n    return {\r\n      action: 'replace_module',\r\n      sourceModule: 'Guard Management',\r\n      targetModule: 'Nurse Management', \r\n      reasoning: 'User wants to replace guard management with nurse management for hospital operations',\r\n      impactDescription: 'Platform will switch from security operations to healthcare operations',\r\n      confidence: 90\r\n    };\r\n  }\r\n  \r\n  if (p.includes('remove') && (p.includes('guard') || p.includes('gps'))) {\r\n    return {\r\n      action: 'remove_module',\r\n      moduleId: p.includes('gps') ? 'gps-tracking' : 'guard-management',\r\n      reasoning: 'User wants to remove module functionality',\r\n      confidence: 85\r\n    };\r\n  }\r\n  \r\n  return {\r\n    action: 'help',\r\n    reasoning: 'Could not determine specific action from prompt',\r\n    suggestions: ['Try: \"Replace guard management with nurse management\"'],\r\n    confidence: 50\r\n  };\r\n}\r\n\r\nfunction generateAIResponse(analysis, originalPrompt) {\r\n  const { action, confidence } = analysis;\r\n  \r\n  switch (action) {\r\n    case 'replace_module':\r\n      return `🧠 **AI Analysis**: I understand you want to replace ${analysis.sourceModule} with ${analysis.targetModule}.\r\n\r\n**Action Plan:**\r\n✅ Archive ${analysis.sourceModule} with all code and data\r\n✅ Activate ${analysis.targetModule} module\r\n✅ Update navigation and dashboard\r\n✅ Preserve all existing data for potential rollback\r\n\r\n**Impact Assessment:**\r\n${analysis.impactDescription}\r\n\r\n**Confidence:** ${confidence}%\r\n\r\n**Ready to proceed?** Click Apply to make this change.`;\r\n\r\n    case 'remove_module':\r\n      return `🧠 **AI Analysis**: I'll remove the specified module and archive it safely.\r\n\r\n**Action Plan:**  \r\n✅ Remove module from active navigation\r\n✅ Archive all code and database schemas\r\n✅ Preserve data for potential restoration\r\n✅ Update related dashboards and reports\r\n\r\n**The module can be restored anytime if needed.**\r\n\r\n**Confidence:** ${confidence}%`;\r\n\r\n    default:\r\n      return `🧠 **AI Analysis**: I'm analyzing your request: \"${originalPrompt}\"\r\n\r\n**I can help you:**\r\n• **Replace modules:** \"Replace guard management with nurse management\"\r\n• **Remove features:** \"Remove GPS tracking module\"\r\n• **Add functionality:** \"Add vendor management system\"\r\n• **Restore archived:** \"Bring back the scheduling module\"\r\n\r\n**What specific changes would you like me to make?**`;\r\n  }\r\n}\r\n\r\nasync function replaceModule(sourceModule, targetModule) {\r\n  try {\r\n    console.log(`🔄 Replacing ${sourceModule} with ${targetModule}`);\r\n    \r\n    const sourceIdx = platformModules.findIndex(m => m.name === sourceModule);\r\n    const targetIdx = platformModules.findIndex(m => m.name === targetModule);\r\n    \r\n    if (sourceIdx === -1) {\r\n      throw new Error(`Source module ${sourceModule} not found`);\r\n    }\r\n    \r\n    const archivedModule = { ...platformModules[sourceIdx] };\r\n    archivedModule.status = 'archived';\r\n    archivedModule.archivedAt = new Date().toISOString();\r\n    archivedModule.archivedReason = `Replaced with ${targetModule}`;\r\n    \r\n    archivedModules.push(archivedModule);\r\n    \r\n    if (targetIdx !== -1) {\r\n      platformModules[targetIdx].status = 'active';\r\n      platformModules[targetIdx].lastModified = new Date().toISOString();\r\n      platformModules.splice(sourceIdx, 1);\r\n    } else {\r\n      const newModule = await generateNewModule(targetModule);\r\n      platformModules[sourceIdx] = newModule;\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: `Successfully replaced ${sourceModule} with ${targetModule}`,\r\n      archivedModule: archivedModule,\r\n      newModule: platformModules.find(m => m.name === targetModule)\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Module replacement failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateNewModule(moduleName) {\r\n  const moduleId = moduleName.toLowerCase().replace(/\\s+/g, '-');\r\n  \r\n  const moduleTemplates = {\r\n    'Nurse Management': {\r\n      id: 'nurse-management',\r\n      name: 'Nurse Management', \r\n      type: 'core',\r\n      status: 'active',\r\n      description: 'Manage nurses, shifts, patient assignments, and medical compliance',\r\n      features: ['Nurse scheduling', 'Patient assignments', 'Shift rotations', 'Certification tracking']\r\n    },\r\n    'Vendor Management': {\r\n      id: 'vendor-management',\r\n      name: 'Vendor Management',\r\n      type: 'feature', \r\n      status: 'active',\r\n      description: 'Manage vendors, contractor employees, and payment distribution',\r\n      features: ['Vendor profiles', 'Employee scheduling', 'Payment processing', 'Performance tracking']\r\n    }\r\n  };\r\n  \r\n  const template = moduleTemplates[moduleName] || {\r\n    id: moduleId,\r\n    name: moduleName,\r\n    type: 'feature',\r\n    status: 'active', \r\n    description: `AI-generated ${moduleName} module`,\r\n    features: ['Core functionality', 'Data management', 'Reporting']\r\n  };\r\n  \r\n  template.lastModified = new Date().toISOString();\r\n  template.createdBy = 'AI Editor';\r\n  \r\n  return template;\r\n}\r\n\r\nasync function removeModule(moduleId) {\r\n  const moduleIdx = platformModules.findIndex(m => m.id === moduleId);\r\n  if (moduleIdx === -1) {\r\n    throw new Error(`Module ${moduleId} not found`);\r\n  }\r\n  \r\n  const module = platformModules[moduleIdx];\r\n  module.status = 'archived';\r\n  module.archivedAt = new Date().toISOString();\r\n  \r\n  archivedModules.push({ ...module });\r\n  platformModules.splice(moduleIdx, 1);\r\n  \r\n  return { success: true, message: `${module.name} archived successfully` };\r\n}\r\n\r\nasync function addModule(moduleName, moduleSpec) {\r\n  try {\r\n    const newModule = {\r\n      id: moduleName.toLowerCase().replace(/\\s+/g, '-'),\r\n      name: moduleName,\r\n      type: 'custom',\r\n      status: 'active',\r\n      description: `AI-generated ${moduleName} module`,\r\n      createdBy: 'AI Builder',\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    platformModules.push(newModule);\r\n    \r\n    return {\r\n      success: true,\r\n      message: `${moduleName} created successfully`,\r\n      module: newModule\r\n    };\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function restoreModule(moduleId) {\r\n  const archivedIdx = archivedModules.findIndex(m => m.id === moduleId);\r\n  if (archivedIdx === -1) {\r\n    throw new Error(`Archived module ${moduleId} not found`);\r\n  }\r\n  \r\n  const module = archivedModules[archivedIdx];\r\n  module.status = 'active';\r\n  module.lastModified = new Date().toISOString();\r\n  delete module.archivedAt;\r\n  delete module.archivedReason;\r\n  \r\n  platformModules.push({ ...module });\r\n  archivedModules.splice(archivedIdx, 1);\r\n  \r\n  return { success: true, message: `${module.name} restored successfully` };\r\n}\r\n\r\nconst port = 3000;\r\napp.listen(port, () => {\r\n  console.log('🚀 Sentari OS running on port ' + port);\r\n});\r\n\r\nconsole.log('🧠 Aetheris: 12 AI cores coordinating intelligence');\r\nconsole.log('🛡️ Vigilis: Guardian layer protecting all operations');\r\nconsole.log('🎓 Companion: Training assistant ready for role-aware guidance');\r\nconsole.log('🤖 Unlimited AI Module Builder System loaded');\r\nconsole.log('📊 Available Templates:', Object.keys(ModuleTemplateSystem.templates).length);\r\nconsole.log('✨ Sentari OS is now fully operational!');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}