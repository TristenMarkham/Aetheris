{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst OpenAI = require('openai');\nconst app = express();\napp.use(express.json({\n  limit: '50mb'\n}));\napp.use(cors({\n  origin: ['http://localhost:3000', 'http://localhost:3001'],\n  credentials: true\n}));\n\n// ================================\n// OPENAI CONFIGURATION\n// ================================\nrequire('dotenv').config();\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || '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'\n});\n\n// ================================\n// PERSISTENT STORAGE SYSTEM\n// ================================\n\nconst DATA_DIR = path.join(__dirname, 'client_data');\nconst CLIENT_FILE = path.join(DATA_DIR, 'default_client.json');\n_c = CLIENT_FILE;\nconst ensureDataDir = async () => {\n  try {\n    await fs.access(DATA_DIR);\n  } catch {\n    await fs.mkdir(DATA_DIR, {\n      recursive: true\n    });\n  }\n};\nconst saveClientData = async data => {\n  await ensureDataDir();\n  await fs.writeFile(CLIENT_FILE, JSON.stringify(data, null, 2));\n  console.log('💾 Client data saved persistently');\n};\nconst loadClientData = async () => {\n  await ensureDataDir();\n  try {\n    const data = await fs.readFile(CLIENT_FILE, 'utf8');\n    const parsed = JSON.parse(data);\n    console.log('📂 Client data loaded from storage');\n    return parsed;\n  } catch {\n    const defaultData = {\n      name: null,\n      industry: null,\n      activeModules: ['dashboard', 'business-setup', 'module-library'],\n      builtModules: [],\n      lastMessage: null,\n      chatHistory: []\n    };\n    console.log('🆕 Creating new client data');\n    return defaultData;\n  }\n};\nlet userSession = {};\nlet activeModules = new Set();\nlet builtModules = [];\nlet chatHistory = [];\nconst initializeServer = async () => {\n  const clientData = await loadClientData();\n  userSession = {\n    name: clientData.name,\n    industry: clientData.industry,\n    lastMessage: clientData.lastMessage,\n    interviewComplete: true\n  };\n  activeModules = new Set(clientData.activeModules || ['dashboard', 'business-setup', 'module-library']);\n  builtModules = clientData.builtModules || [];\n  chatHistory = clientData.chatHistory || [];\n  console.log(`✅ Loaded ${builtModules.length} persistent modules`);\n  console.log(`💬 Loaded ${chatHistory.length} chat messages`);\n};\nconst saveCurrentState = async () => {\n  const data = {\n    name: userSession.name,\n    industry: userSession.industry,\n    activeModules: Array.from(activeModules),\n    builtModules: builtModules,\n    lastMessage: userSession.lastMessage,\n    chatHistory: chatHistory.slice(-50),\n    lastUpdated: new Date().toISOString()\n  };\n  await saveClientData(data);\n};\n\n// ================================\n// FIXED AI SYSTEM WITH MODULE BUILDING\n// ================================\n\nconst getAetherisSystemPrompt = () => {\n  const userName = userSession.name || '[User name not provided]';\n  const industry = userSession.industry || 'Security Services';\n  const moduleCount = builtModules.length;\n  const moduleList = builtModules.map(m => m.name).join(', ') || 'None built yet';\n  return `You are Aetheris, an AI business architect for Sentari OS platform.\n\nCURRENT USER PROFILE:\n- Name: ${userName}\n- Industry: ${industry} \n- Company: Markham Investigation & Protection (Security Services)\n- Role: CFO\n- Built Modules: ${moduleList} (${moduleCount} total)\n\nCRITICAL INSTRUCTIONS:\n1. ALWAYS use the user's name \"${userName}\" when addressing them\n2. When they request modules, I will BUILD them automatically - you just explain what was built\n3. Be conversational and helpful, not repetitive\n4. Focus on the security industry and their specific needs\n\nPERSONALITY:\n- Professional but friendly\n- Remember previous conversation context\n- Ask intelligent follow-up questions about their security business\n- Focus on solving real business problems for MIP security company\n\nRESPONSE STYLE:\n- Keep responses concise but comprehensive\n- Use emojis sparingly and professionally\n- Always maintain conversation context\n- Don't repeat introductions if you know the user`;\n};\n\n// ================================\n// ENHANCED CHAT HANDLER WITH FIXED MODULE BUILDING\n// ================================\n\napp.post('/api/aetheris/chat', async (req, res) => {\n  try {\n    const {\n      message\n    } = req.body;\n    console.log(`💬 User: \"${message}\"`);\n    const msg = message.toLowerCase().trim();\n    let response = '';\n    let newModule = null;\n    let useOpenAI = true;\n\n    // FIXED NAME LEARNING\n    if (msg.includes('my name is') || msg.includes('i am ') || msg.includes('name is')) {\n      let nameFound = null;\n      if (msg.includes('my name is')) {\n        const match = message.match(/my name is\\s+([a-zA-Z]+)/i);\n        if (match) nameFound = match[1];\n      } else if (msg.includes('i am ') && !msg.includes('i am in') && !msg.includes('i am a ')) {\n        const match = message.match(/i am\\s+([a-zA-Z]+)/i);\n        if (match) nameFound = match[1];\n      } else if (msg.includes('name is')) {\n        const match = message.match(/name is\\s+([a-zA-Z]+)/i);\n        if (match) nameFound = match[1];\n      }\n      if (nameFound && nameFound.length > 1) {\n        const oldName = userSession.name;\n        userSession.name = nameFound.charAt(0).toUpperCase() + nameFound.slice(1);\n        await saveCurrentState();\n        if (oldName && oldName === userSession.name) {\n          response = `I already know your name is ${userSession.name}! What can I help you build for Markham Investigation & Protection today?`;\n        } else {\n          response = `Perfect! I've got it - you're ${userSession.name}, CFO of Markham Investigation & Protection. What specific modules would you like me to build for your security business?`;\n        }\n        useOpenAI = false;\n      }\n    }\n\n    // ENHANCED MODULE BUILDING - More trigger phrases\n    else if (msg.includes('build all') || msg.includes('build them all') || msg.includes('build modules') || msg.includes('create all') || msg.includes('make all') || msg.includes('build') && (msg.includes('security') || msg.includes('guard') || msg.includes('everything'))) {\n      // Create all core business modules for security company\n      const securityModules = [{\n        id: 'employee-management',\n        name: 'Employee Management',\n        type: 'employee',\n        description: 'Manage security guards, certifications, and performance',\n        features: ['staff_profiles', 'certifications', 'performance_tracking', 'gps_optional']\n      }, {\n        id: 'scheduling-system',\n        name: 'Guard Scheduling',\n        type: 'scheduling',\n        description: 'Smart scheduling with site assignments and coverage',\n        features: ['shift_planning', 'site_assignments', 'coverage_optimization', 'mobile_access']\n      }, {\n        id: 'billing-invoicing',\n        name: 'Billing & Invoicing',\n        type: 'billing',\n        description: 'Client billing, vendor payments, and financial tracking',\n        features: ['client_invoicing', 'vendor_payments', 'rate_management', 'financial_reports']\n      }, {\n        id: 'patrol-management',\n        name: 'Patrol Management',\n        type: 'patrol',\n        description: 'Route planning, GPS tracking, and incident reporting',\n        features: ['route_planning', 'gps_tracking', 'incident_reports', 'real_time_updates']\n      }, {\n        id: 'surveillance-integration',\n        name: 'Surveillance Integration',\n        type: 'surveillance',\n        description: 'Camera feeds, monitoring, and security alerts',\n        features: ['live_feeds', 'alert_system', 'recording_management', 'multi_site_monitoring']\n      }, {\n        id: 'client-management',\n        name: 'Client Management',\n        type: 'client',\n        description: 'Client relationships, contracts, and communications',\n        features: ['client_profiles', 'contract_management', 'communication_tracking', 'satisfaction_monitoring']\n      }];\n\n      // Add modules that don't already exist\n      let addedModules = [];\n      securityModules.forEach(moduleConfig => {\n        const exists = builtModules.find(m => m.id === moduleConfig.id);\n        if (!exists) {\n          const newMod = {\n            ...moduleConfig,\n            status: 'active',\n            created: new Date().toISOString(),\n            hasGPS: ['patrol', 'employee', 'surveillance'].includes(moduleConfig.type)\n          };\n          builtModules.push(newMod);\n          activeModules.add(newMod.id);\n          addedModules.push(newMod);\n        }\n      });\n      if (addedModules.length > 0) {\n        newModule = addedModules[0]; // Return first new module for UI\n        await saveCurrentState();\n        response = `Excellent, ${userSession.name}! I've built ${addedModules.length} security-focused modules for Markham Investigation & Protection:\n\n${addedModules.map(m => `✅ **${m.name}** - ${m.description}`).join('\\n')}\n\nAll modules are now active in your sidebar and include GPS tracking where relevant. Each module is tailored for security operations - from guard management to client billing.\n\nWhat would you like to explore first, or should I customize any of these modules further for your specific needs?`;\n        useOpenAI = false;\n      } else {\n        response = `${userSession.name}, you already have all the core security modules built! Your platform includes: ${builtModules.map(m => m.name).join(', ')}.\n\nWould you like me to enhance any existing modules or build additional specialized modules for cameras, patrol tech, or other areas you mentioned?`;\n        useOpenAI = false;\n      }\n    }\n\n    // INDIVIDUAL MODULE BUILDING - Fixed to actually build modules\n    else if ((msg.includes('build') || msg.includes('create') || msg.includes('make')) && (msg.includes('schedul') || msg.includes('shift') || msg.includes('time'))) {\n      const existingScheduling = builtModules.find(m => m.type === 'scheduling');\n      if (!existingScheduling) {\n        newModule = {\n          id: 'scheduling-system',\n          name: 'Smart Scheduling',\n          type: 'scheduling',\n          status: 'active',\n          description: 'AI-powered scheduling with conflict detection and site assignments',\n          features: ['shift_planning', 'site_assignments', 'conflict_detection', 'optimization', 'mobile_access', 'gps_verification'],\n          created: new Date().toISOString(),\n          hasGPS: true\n        };\n        builtModules.push(newModule);\n        activeModules.add(newModule.id);\n        await saveCurrentState();\n        response = `Perfect, ${userSession.name}! I've built a comprehensive **Smart Scheduling** module for your security operations:\n\n✅ **Module Created:** Smart Scheduling System\n\n**🗓️ Key Features:**\n• **Shift Planning** - Create and manage guard shifts across all sites\n• **Site Assignments** - Assign specific guards to McDonald's, hospitals, etc.\n• **Conflict Detection** - Automatically prevent double-booking and coverage gaps  \n• **GPS Verification** - Verify guard check-ins at correct locations\n• **Mobile Access** - Guards can view schedules on their phones\n• **Coverage Optimization** - AI suggests optimal staffing levels\n\nThe module is now active in your sidebar and ready to use! You can assign guards to specific client sites, track their locations, and ensure full coverage across all your contracts.\n\nWould you like me to customize it further for any specific client requirements?`;\n        useOpenAI = false;\n      } else {\n        response = `You already have a scheduling system active, ${userSession.name}! Would you like me to enhance it with additional features or build a different module?`;\n        useOpenAI = false;\n      }\n    }\n\n    // BILLING MODULE BUILDING\n    else if ((msg.includes('build') || msg.includes('create') || msg.includes('make')) && (msg.includes('bill') || msg.includes('invoic') || msg.includes('payment'))) {\n      const existingBilling = builtModules.find(m => m.type === 'billing');\n      if (!existingBilling) {\n        newModule = {\n          id: 'billing-invoicing',\n          name: 'Billing & Invoicing',\n          type: 'billing',\n          status: 'active',\n          description: 'Complete billing system with client invoicing and vendor payments',\n          features: ['client_invoicing', 'vendor_payments', 'rate_management', 'financial_reports', 'automated_billing'],\n          created: new Date().toISOString(),\n          hasGPS: false\n        };\n        builtModules.push(newModule);\n        activeModules.add(newModule.id);\n        await saveCurrentState();\n        response = `Excellent, ${userSession.name}! I've built a comprehensive **Billing & Invoicing** module for MIP:\n\n✅ **Module Created:** Billing & Invoicing System\n\n**💰 Key Features:**\n• **Client Invoicing** - Generate bills for McDonald's, hospitals, and all clients\n• **Vendor Payments** - Manage payments to your security contractors\n• **Rate Management** - Different billing rates per client and service type\n• **Financial Reports** - Track revenue, expenses, and profit margins\n• **Automated Billing** - Recurring invoices based on service contracts\n\nPerfect for managing your security service finances! The module handles both incoming revenue from clients and outgoing payments to your guard contractors.\n\nThe billing module is now active in your sidebar. Would you like me to build additional modules or customize this one further?`;\n        useOpenAI = false;\n      } else {\n        response = `You already have a billing system, ${userSession.name}! Want me to enhance it or build a different module?`;\n        useOpenAI = false;\n      }\n    }\n\n    // MODULE DELETION - Fixed\n    else if (msg.includes('delete') && (msg.includes('schedule') || msg.includes('scheduling') || msg.includes('Smart Scheduling'))) {\n      const scheduleModule = builtModules.find(m => m.type === 'scheduling' || m.name.includes('Schedul'));\n      if (scheduleModule) {\n        builtModules = builtModules.filter(m => m.id !== scheduleModule.id);\n        activeModules.delete(scheduleModule.id);\n        await saveCurrentState();\n        response = `✅ **Module Deleted Successfully**, ${userSession.name}!\n\nThe **${scheduleModule.name}** module has been removed from your platform. It's no longer visible but I can rebuild it anytime if needed.\n\nCurrent active modules: ${builtModules.map(m => m.name).join(', ') || 'None (just core platform)'}\n\nWhat would you like to build or modify next?`;\n        useOpenAI = false;\n      } else {\n        response = `${userSession.name}, I don't see a scheduling module to delete. Your current modules are: ${builtModules.map(m => m.name).join(', ') || 'None built yet'}.\n\nWhat would you like me to help you with?`;\n        useOpenAI = false;\n      }\n    }\n\n    // Simple greetings\n    else if (msg === 'hello' || msg === 'hi' || msg === 'hey') {\n      if (!userSession.name) {\n        response = `Hello! I'm Aetheris, your AI business architect. What's your name?`;\n      } else {\n        response = `Hello ${userSession.name}! Ready to continue building your security platform? What would you like to work on today?`;\n      }\n      useOpenAI = false;\n    }\n\n    // For everything else, use OpenAI with proper context\n    if (useOpenAI) {\n      try {\n        chatHistory.push({\n          role: 'user',\n          content: message,\n          timestamp: new Date().toISOString()\n        });\n        const recentHistory = chatHistory.slice(-10).map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }));\n        const completion = await openai.chat.completions.create({\n          model: \"gpt-4\",\n          messages: [{\n            role: \"system\",\n            content: getAetherisSystemPrompt()\n          }, ...recentHistory],\n          max_tokens: 400,\n          temperature: 0.7\n        });\n        response = completion.choices[0].message.content;\n        chatHistory.push({\n          role: 'assistant',\n          content: response,\n          timestamp: new Date().toISOString()\n        });\n        console.log('🧠 OpenAI Response Generated');\n      } catch (openaiError) {\n        console.error('❌ OpenAI Error:', openaiError.message);\n        response = `I'm having trouble with my AI processing right now, ${userSession.name}. Let me help you with the basic functions instead! What would you like me to build for your security business?`;\n      }\n    }\n    userSession.lastMessage = message;\n    if (chatHistory.length % 5 === 0) {\n      await saveCurrentState();\n    }\n    res.json({\n      success: true,\n      response: response,\n      newModule: newModule,\n      userName: userSession.name,\n      builtModules: builtModules\n    });\n  } catch (error) {\n    console.error('❌ Chat Error:', error);\n    res.status(500).json({\n      success: false,\n      response: 'I apologize, but I encountered an error. Could you please try your request again?'\n    });\n  }\n});\n\n// ================================\n// API ENDPOINTS (keep existing)\n// ================================\n\napp.get('/api/modules', async (req, res) => {\n  try {\n    res.json({\n      success: true,\n      modules: builtModules,\n      activeModules: Array.from(activeModules),\n      userName: userSession.name\n    });\n  } catch (error) {\n    console.error('Error loading modules:', error);\n    res.status(500).json({\n      success: false,\n      modules: []\n    });\n  }\n});\napp.delete('/api/modules/:moduleId', async (req, res) => {\n  try {\n    const {\n      moduleId\n    } = req.params;\n    builtModules = builtModules.filter(m => m.id !== moduleId);\n    activeModules.delete(moduleId);\n    await saveCurrentState();\n    console.log(`🗑️ Module ${moduleId} deleted permanently`);\n    res.json({\n      success: true,\n      modules: builtModules,\n      message: 'Module deleted permanently'\n    });\n  } catch (error) {\n    console.error('Error deleting module:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to delete module'\n    });\n  }\n});\napp.get('/api/health', (req, res) => {\n  res.json({\n    status: 'Fixed AI System - Actually Builds Modules!',\n    user: userSession.name || 'Anonymous',\n    modules: builtModules.length,\n    activeModules: Array.from(activeModules),\n    openaiEnabled: !!process.env.OPENAI_API_KEY || !!openai.apiKey,\n    chatHistory: chatHistory.length\n  });\n});\n\n// ================================\n// SERVER STARTUP\n// ================================\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, async () => {\n  await initializeServer();\n  console.log('🧠 FIXED AI System - Actually Builds Modules!');\n  console.log('✅ Fixed name learning - no more confusion');\n  console.log('✅ Fixed module building - ACTUALLY CREATES MODULES');\n  console.log('✅ Fixed context memory - remembers conversations');\n  console.log('✅ More trigger phrases for module building');\n  console.log(`📁 Loaded ${builtModules.length} existing modules`);\n  console.log(`👤 User: ${userSession.name || 'New user'}`);\n  console.log(`🚀 Server running on port ${PORT}`);\n  console.log('💬 Ready for intelligent module building!');\n});\nprocess.on('SIGINT', async () => {\n  console.log('\\n🛑 Shutting down...');\n  await saveCurrentState();\n  console.log('💾 Final state saved');\n  process.exit(0);\n});\nvar _c;\n$RefreshReg$(_c, \"CLIENT_FILE\");","map":{"version":3,"names":["express","require","cors","fs","promises","path","OpenAI","app","use","json","limit","origin","credentials","config","openai","apiKey","process","env","OPENAI_API_KEY","DATA_DIR","join","__dirname","CLIENT_FILE","_c","ensureDataDir","access","mkdir","recursive","saveClientData","data","writeFile","JSON","stringify","console","log","loadClientData","readFile","parsed","parse","defaultData","name","industry","activeModules","builtModules","lastMessage","chatHistory","userSession","Set","initializeServer","clientData","interviewComplete","length","saveCurrentState","Array","from","slice","lastUpdated","Date","toISOString","getAetherisSystemPrompt","userName","moduleCount","moduleList","map","m","post","req","res","message","body","msg","toLowerCase","trim","response","newModule","useOpenAI","includes","nameFound","match","oldName","charAt","toUpperCase","securityModules","id","type","description","features","addedModules","forEach","moduleConfig","exists","find","newMod","status","created","hasGPS","push","add","existingScheduling","existingBilling","scheduleModule","filter","delete","role","content","timestamp","recentHistory","completion","chat","completions","create","model","messages","max_tokens","temperature","choices","openaiError","error","success","get","modules","moduleId","params","user","openaiEnabled","PORT","listen","on","exit","$RefreshReg$"],"sources":["C:/Users/onetr/OneDrive/Desktop/universal-business-platform/universal-business-platform/frontend/src/App.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst fs = require('fs').promises;\r\nconst path = require('path');\r\nconst OpenAI = require('openai');\r\n\r\nconst app = express();\r\n\r\napp.use(express.json({ limit: '50mb' }));\r\napp.use(cors({\r\n  origin: ['http://localhost:3000', 'http://localhost:3001'],\r\n  credentials: true\r\n}));\r\n\r\n// ================================\r\n// OPENAI CONFIGURATION\r\n// ================================\r\nrequire('dotenv').config();\r\n\r\nconst openai = new OpenAI({\r\n  apiKey: process.env.OPENAI_API_KEY || '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'\r\n});\r\n\r\n// ================================\r\n// PERSISTENT STORAGE SYSTEM\r\n// ================================\r\n\r\nconst DATA_DIR = path.join(__dirname, 'client_data');\r\nconst CLIENT_FILE = path.join(DATA_DIR, 'default_client.json');\r\n\r\nconst ensureDataDir = async () => {\r\n  try {\r\n    await fs.access(DATA_DIR);\r\n  } catch {\r\n    await fs.mkdir(DATA_DIR, { recursive: true });\r\n  }\r\n};\r\n\r\nconst saveClientData = async (data) => {\r\n  await ensureDataDir();\r\n  await fs.writeFile(CLIENT_FILE, JSON.stringify(data, null, 2));\r\n  console.log('💾 Client data saved persistently');\r\n};\r\n\r\nconst loadClientData = async () => {\r\n  await ensureDataDir();\r\n  try {\r\n    const data = await fs.readFile(CLIENT_FILE, 'utf8');\r\n    const parsed = JSON.parse(data);\r\n    console.log('📂 Client data loaded from storage');\r\n    return parsed;\r\n  } catch {\r\n    const defaultData = {\r\n      name: null,\r\n      industry: null,\r\n      activeModules: ['dashboard', 'business-setup', 'module-library'],\r\n      builtModules: [],\r\n      lastMessage: null,\r\n      chatHistory: []\r\n    };\r\n    console.log('🆕 Creating new client data');\r\n    return defaultData;\r\n  }\r\n};\r\n\r\nlet userSession = {};\r\nlet activeModules = new Set();\r\nlet builtModules = [];\r\nlet chatHistory = [];\r\n\r\nconst initializeServer = async () => {\r\n  const clientData = await loadClientData();\r\n  userSession = {\r\n    name: clientData.name,\r\n    industry: clientData.industry,\r\n    lastMessage: clientData.lastMessage,\r\n    interviewComplete: true\r\n  };\r\n  activeModules = new Set(clientData.activeModules || ['dashboard', 'business-setup', 'module-library']);\r\n  builtModules = clientData.builtModules || [];\r\n  chatHistory = clientData.chatHistory || [];\r\n  \r\n  console.log(`✅ Loaded ${builtModules.length} persistent modules`);\r\n  console.log(`💬 Loaded ${chatHistory.length} chat messages`);\r\n};\r\n\r\nconst saveCurrentState = async () => {\r\n  const data = {\r\n    name: userSession.name,\r\n    industry: userSession.industry,\r\n    activeModules: Array.from(activeModules),\r\n    builtModules: builtModules,\r\n    lastMessage: userSession.lastMessage,\r\n    chatHistory: chatHistory.slice(-50),\r\n    lastUpdated: new Date().toISOString()\r\n  };\r\n  await saveClientData(data);\r\n};\r\n\r\n// ================================\r\n// FIXED AI SYSTEM WITH MODULE BUILDING\r\n// ================================\r\n\r\nconst getAetherisSystemPrompt = () => {\r\n  const userName = userSession.name || '[User name not provided]';\r\n  const industry = userSession.industry || 'Security Services';\r\n  const moduleCount = builtModules.length;\r\n  const moduleList = builtModules.map(m => m.name).join(', ') || 'None built yet';\r\n  \r\n  return `You are Aetheris, an AI business architect for Sentari OS platform.\r\n\r\nCURRENT USER PROFILE:\r\n- Name: ${userName}\r\n- Industry: ${industry} \r\n- Company: Markham Investigation & Protection (Security Services)\r\n- Role: CFO\r\n- Built Modules: ${moduleList} (${moduleCount} total)\r\n\r\nCRITICAL INSTRUCTIONS:\r\n1. ALWAYS use the user's name \"${userName}\" when addressing them\r\n2. When they request modules, I will BUILD them automatically - you just explain what was built\r\n3. Be conversational and helpful, not repetitive\r\n4. Focus on the security industry and their specific needs\r\n\r\nPERSONALITY:\r\n- Professional but friendly\r\n- Remember previous conversation context\r\n- Ask intelligent follow-up questions about their security business\r\n- Focus on solving real business problems for MIP security company\r\n\r\nRESPONSE STYLE:\r\n- Keep responses concise but comprehensive\r\n- Use emojis sparingly and professionally\r\n- Always maintain conversation context\r\n- Don't repeat introductions if you know the user`;\r\n};\r\n\r\n// ================================\r\n// ENHANCED CHAT HANDLER WITH FIXED MODULE BUILDING\r\n// ================================\r\n\r\napp.post('/api/aetheris/chat', async (req, res) => {\r\n  try {\r\n    const { message } = req.body;\r\n    console.log(`💬 User: \"${message}\"`);\r\n    \r\n    const msg = message.toLowerCase().trim();\r\n    let response = '';\r\n    let newModule = null;\r\n    let useOpenAI = true;\r\n\r\n    // FIXED NAME LEARNING\r\n    if (msg.includes('my name is') || msg.includes('i am ') || msg.includes('name is')) {\r\n      let nameFound = null;\r\n      \r\n      if (msg.includes('my name is')) {\r\n        const match = message.match(/my name is\\s+([a-zA-Z]+)/i);\r\n        if (match) nameFound = match[1];\r\n      } else if (msg.includes('i am ') && !msg.includes('i am in') && !msg.includes('i am a ')) {\r\n        const match = message.match(/i am\\s+([a-zA-Z]+)/i);\r\n        if (match) nameFound = match[1];\r\n      } else if (msg.includes('name is')) {\r\n        const match = message.match(/name is\\s+([a-zA-Z]+)/i);\r\n        if (match) nameFound = match[1];\r\n      }\r\n      \r\n      if (nameFound && nameFound.length > 1) {\r\n        const oldName = userSession.name;\r\n        userSession.name = nameFound.charAt(0).toUpperCase() + nameFound.slice(1);\r\n        await saveCurrentState();\r\n        \r\n        if (oldName && oldName === userSession.name) {\r\n          response = `I already know your name is ${userSession.name}! What can I help you build for Markham Investigation & Protection today?`;\r\n        } else {\r\n          response = `Perfect! I've got it - you're ${userSession.name}, CFO of Markham Investigation & Protection. What specific modules would you like me to build for your security business?`;\r\n        }\r\n        useOpenAI = false;\r\n      }\r\n    }\r\n    \r\n    // ENHANCED MODULE BUILDING - More trigger phrases\r\n    else if (\r\n      msg.includes('build all') || \r\n      msg.includes('build them all') || \r\n      msg.includes('build modules') ||\r\n      msg.includes('create all') ||\r\n      msg.includes('make all') ||\r\n      (msg.includes('build') && (msg.includes('security') || msg.includes('guard') || msg.includes('everything')))\r\n    ) {\r\n      // Create all core business modules for security company\r\n      const securityModules = [\r\n        {\r\n          id: 'employee-management',\r\n          name: 'Employee Management',\r\n          type: 'employee',\r\n          description: 'Manage security guards, certifications, and performance',\r\n          features: ['staff_profiles', 'certifications', 'performance_tracking', 'gps_optional'],\r\n        },\r\n        {\r\n          id: 'scheduling-system',\r\n          name: 'Guard Scheduling',\r\n          type: 'scheduling', \r\n          description: 'Smart scheduling with site assignments and coverage',\r\n          features: ['shift_planning', 'site_assignments', 'coverage_optimization', 'mobile_access'],\r\n        },\r\n        {\r\n          id: 'billing-invoicing',\r\n          name: 'Billing & Invoicing',\r\n          type: 'billing',\r\n          description: 'Client billing, vendor payments, and financial tracking',\r\n          features: ['client_invoicing', 'vendor_payments', 'rate_management', 'financial_reports'],\r\n        },\r\n        {\r\n          id: 'patrol-management',\r\n          name: 'Patrol Management',\r\n          type: 'patrol',\r\n          description: 'Route planning, GPS tracking, and incident reporting',\r\n          features: ['route_planning', 'gps_tracking', 'incident_reports', 'real_time_updates'],\r\n        },\r\n        {\r\n          id: 'surveillance-integration',\r\n          name: 'Surveillance Integration',\r\n          type: 'surveillance',\r\n          description: 'Camera feeds, monitoring, and security alerts',\r\n          features: ['live_feeds', 'alert_system', 'recording_management', 'multi_site_monitoring'],\r\n        },\r\n        {\r\n          id: 'client-management',\r\n          name: 'Client Management',\r\n          type: 'client',\r\n          description: 'Client relationships, contracts, and communications',\r\n          features: ['client_profiles', 'contract_management', 'communication_tracking', 'satisfaction_monitoring'],\r\n        }\r\n      ];\r\n      \r\n      // Add modules that don't already exist\r\n      let addedModules = [];\r\n      securityModules.forEach(moduleConfig => {\r\n        const exists = builtModules.find(m => m.id === moduleConfig.id);\r\n        if (!exists) {\r\n          const newMod = {\r\n            ...moduleConfig,\r\n            status: 'active',\r\n            created: new Date().toISOString(),\r\n            hasGPS: ['patrol', 'employee', 'surveillance'].includes(moduleConfig.type)\r\n          };\r\n          \r\n          builtModules.push(newMod);\r\n          activeModules.add(newMod.id);\r\n          addedModules.push(newMod);\r\n        }\r\n      });\r\n      \r\n      if (addedModules.length > 0) {\r\n        newModule = addedModules[0]; // Return first new module for UI\r\n        await saveCurrentState();\r\n        \r\n        response = `Excellent, ${userSession.name}! I've built ${addedModules.length} security-focused modules for Markham Investigation & Protection:\r\n\r\n${addedModules.map(m => `✅ **${m.name}** - ${m.description}`).join('\\n')}\r\n\r\nAll modules are now active in your sidebar and include GPS tracking where relevant. Each module is tailored for security operations - from guard management to client billing.\r\n\r\nWhat would you like to explore first, or should I customize any of these modules further for your specific needs?`;\r\n        useOpenAI = false;\r\n      } else {\r\n        response = `${userSession.name}, you already have all the core security modules built! Your platform includes: ${builtModules.map(m => m.name).join(', ')}.\r\n\r\nWould you like me to enhance any existing modules or build additional specialized modules for cameras, patrol tech, or other areas you mentioned?`;\r\n        useOpenAI = false;\r\n      }\r\n    }\r\n    \r\n    // INDIVIDUAL MODULE BUILDING - Fixed to actually build modules\r\n    else if (\r\n      (msg.includes('build') || msg.includes('create') || msg.includes('make')) && \r\n      (msg.includes('schedul') || msg.includes('shift') || msg.includes('time'))\r\n    ) {\r\n      const existingScheduling = builtModules.find(m => m.type === 'scheduling');\r\n      \r\n      if (!existingScheduling) {\r\n        newModule = {\r\n          id: 'scheduling-system',\r\n          name: 'Smart Scheduling',\r\n          type: 'scheduling',\r\n          status: 'active',\r\n          description: 'AI-powered scheduling with conflict detection and site assignments',\r\n          features: ['shift_planning', 'site_assignments', 'conflict_detection', 'optimization', 'mobile_access', 'gps_verification'],\r\n          created: new Date().toISOString(),\r\n          hasGPS: true\r\n        };\r\n        \r\n        builtModules.push(newModule);\r\n        activeModules.add(newModule.id);\r\n        await saveCurrentState();\r\n        \r\n        response = `Perfect, ${userSession.name}! I've built a comprehensive **Smart Scheduling** module for your security operations:\r\n\r\n✅ **Module Created:** Smart Scheduling System\r\n\r\n**🗓️ Key Features:**\r\n• **Shift Planning** - Create and manage guard shifts across all sites\r\n• **Site Assignments** - Assign specific guards to McDonald's, hospitals, etc.\r\n• **Conflict Detection** - Automatically prevent double-booking and coverage gaps  \r\n• **GPS Verification** - Verify guard check-ins at correct locations\r\n• **Mobile Access** - Guards can view schedules on their phones\r\n• **Coverage Optimization** - AI suggests optimal staffing levels\r\n\r\nThe module is now active in your sidebar and ready to use! You can assign guards to specific client sites, track their locations, and ensure full coverage across all your contracts.\r\n\r\nWould you like me to customize it further for any specific client requirements?`;\r\n        useOpenAI = false;\r\n      } else {\r\n        response = `You already have a scheduling system active, ${userSession.name}! Would you like me to enhance it with additional features or build a different module?`;\r\n        useOpenAI = false;\r\n      }\r\n    }\r\n    \r\n    // BILLING MODULE BUILDING\r\n    else if (\r\n      (msg.includes('build') || msg.includes('create') || msg.includes('make')) && \r\n      (msg.includes('bill') || msg.includes('invoic') || msg.includes('payment'))\r\n    ) {\r\n      const existingBilling = builtModules.find(m => m.type === 'billing');\r\n      \r\n      if (!existingBilling) {\r\n        newModule = {\r\n          id: 'billing-invoicing',\r\n          name: 'Billing & Invoicing',\r\n          type: 'billing',\r\n          status: 'active', \r\n          description: 'Complete billing system with client invoicing and vendor payments',\r\n          features: ['client_invoicing', 'vendor_payments', 'rate_management', 'financial_reports', 'automated_billing'],\r\n          created: new Date().toISOString(),\r\n          hasGPS: false\r\n        };\r\n        \r\n        builtModules.push(newModule);\r\n        activeModules.add(newModule.id);\r\n        await saveCurrentState();\r\n        \r\n        response = `Excellent, ${userSession.name}! I've built a comprehensive **Billing & Invoicing** module for MIP:\r\n\r\n✅ **Module Created:** Billing & Invoicing System\r\n\r\n**💰 Key Features:**\r\n• **Client Invoicing** - Generate bills for McDonald's, hospitals, and all clients\r\n• **Vendor Payments** - Manage payments to your security contractors\r\n• **Rate Management** - Different billing rates per client and service type\r\n• **Financial Reports** - Track revenue, expenses, and profit margins\r\n• **Automated Billing** - Recurring invoices based on service contracts\r\n\r\nPerfect for managing your security service finances! The module handles both incoming revenue from clients and outgoing payments to your guard contractors.\r\n\r\nThe billing module is now active in your sidebar. Would you like me to build additional modules or customize this one further?`;\r\n        useOpenAI = false;\r\n      } else {\r\n        response = `You already have a billing system, ${userSession.name}! Want me to enhance it or build a different module?`;\r\n        useOpenAI = false;\r\n      }\r\n    }\r\n    \r\n    // MODULE DELETION - Fixed\r\n    else if (msg.includes('delete') && (msg.includes('schedule') || msg.includes('scheduling') || msg.includes('Smart Scheduling'))) {\r\n      const scheduleModule = builtModules.find(m => m.type === 'scheduling' || m.name.includes('Schedul'));\r\n      if (scheduleModule) {\r\n        builtModules = builtModules.filter(m => m.id !== scheduleModule.id);\r\n        activeModules.delete(scheduleModule.id);\r\n        await saveCurrentState();\r\n        \r\n        response = `✅ **Module Deleted Successfully**, ${userSession.name}!\r\n\r\nThe **${scheduleModule.name}** module has been removed from your platform. It's no longer visible but I can rebuild it anytime if needed.\r\n\r\nCurrent active modules: ${builtModules.map(m => m.name).join(', ') || 'None (just core platform)'}\r\n\r\nWhat would you like to build or modify next?`;\r\n        useOpenAI = false;\r\n      } else {\r\n        response = `${userSession.name}, I don't see a scheduling module to delete. Your current modules are: ${builtModules.map(m => m.name).join(', ') || 'None built yet'}.\r\n\r\nWhat would you like me to help you with?`;\r\n        useOpenAI = false;\r\n      }\r\n    }\r\n    \r\n    // Simple greetings\r\n    else if (msg === 'hello' || msg === 'hi' || msg === 'hey') {\r\n      if (!userSession.name) {\r\n        response = `Hello! I'm Aetheris, your AI business architect. What's your name?`;\r\n      } else {\r\n        response = `Hello ${userSession.name}! Ready to continue building your security platform? What would you like to work on today?`;\r\n      }\r\n      useOpenAI = false;\r\n    }\r\n    \r\n    // For everything else, use OpenAI with proper context\r\n    if (useOpenAI) {\r\n      try {\r\n        chatHistory.push({\r\n          role: 'user',\r\n          content: message,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        const recentHistory = chatHistory.slice(-10).map(msg => ({\r\n          role: msg.role,\r\n          content: msg.content\r\n        }));\r\n        \r\n        const completion = await openai.chat.completions.create({\r\n          model: \"gpt-4\",\r\n          messages: [\r\n            { role: \"system\", content: getAetherisSystemPrompt() },\r\n            ...recentHistory\r\n          ],\r\n          max_tokens: 400,\r\n          temperature: 0.7\r\n        });\r\n        \r\n        response = completion.choices[0].message.content;\r\n        \r\n        chatHistory.push({\r\n          role: 'assistant',\r\n          content: response,\r\n          timestamp: new Date().toISOString()\r\n        });\r\n        \r\n        console.log('🧠 OpenAI Response Generated');\r\n        \r\n      } catch (openaiError) {\r\n        console.error('❌ OpenAI Error:', openaiError.message);\r\n        response = `I'm having trouble with my AI processing right now, ${userSession.name}. Let me help you with the basic functions instead! What would you like me to build for your security business?`;\r\n      }\r\n    }\r\n    \r\n    userSession.lastMessage = message;\r\n    \r\n    if (chatHistory.length % 5 === 0) {\r\n      await saveCurrentState();\r\n    }\r\n    \r\n    res.json({\r\n      success: true,\r\n      response: response,\r\n      newModule: newModule,\r\n      userName: userSession.name,\r\n      builtModules: builtModules\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Chat Error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      response: 'I apologize, but I encountered an error. Could you please try your request again?'\r\n    });\r\n  }\r\n});\r\n\r\n// ================================\r\n// API ENDPOINTS (keep existing)\r\n// ================================\r\n\r\napp.get('/api/modules', async (req, res) => {\r\n  try {\r\n    res.json({\r\n      success: true,\r\n      modules: builtModules,\r\n      activeModules: Array.from(activeModules),\r\n      userName: userSession.name\r\n    });\r\n  } catch (error) {\r\n    console.error('Error loading modules:', error);\r\n    res.status(500).json({ success: false, modules: [] });\r\n  }\r\n});\r\n\r\napp.delete('/api/modules/:moduleId', async (req, res) => {\r\n  try {\r\n    const { moduleId } = req.params;\r\n    \r\n    builtModules = builtModules.filter(m => m.id !== moduleId);\r\n    activeModules.delete(moduleId);\r\n    \r\n    await saveCurrentState();\r\n    \r\n    console.log(`🗑️ Module ${moduleId} deleted permanently`);\r\n    \r\n    res.json({\r\n      success: true,\r\n      modules: builtModules,\r\n      message: 'Module deleted permanently'\r\n    });\r\n  } catch (error) {\r\n    console.error('Error deleting module:', error);\r\n    res.status(500).json({ success: false, error: 'Failed to delete module' });\r\n  }\r\n});\r\n\r\napp.get('/api/health', (req, res) => {\r\n  res.json({\r\n    status: 'Fixed AI System - Actually Builds Modules!',\r\n    user: userSession.name || 'Anonymous',\r\n    modules: builtModules.length,\r\n    activeModules: Array.from(activeModules),\r\n    openaiEnabled: !!process.env.OPENAI_API_KEY || !!openai.apiKey,\r\n    chatHistory: chatHistory.length\r\n  });\r\n});\r\n\r\n// ================================\r\n// SERVER STARTUP\r\n// ================================\r\n\r\nconst PORT = process.env.PORT || 3000;\r\n\r\napp.listen(PORT, async () => {\r\n  await initializeServer();\r\n  \r\n  console.log('🧠 FIXED AI System - Actually Builds Modules!');\r\n  console.log('✅ Fixed name learning - no more confusion');\r\n  console.log('✅ Fixed module building - ACTUALLY CREATES MODULES');\r\n  console.log('✅ Fixed context memory - remembers conversations');\r\n  console.log('✅ More trigger phrases for module building');\r\n  console.log(`📁 Loaded ${builtModules.length} existing modules`);\r\n  console.log(`👤 User: ${userSession.name || 'New user'}`);\r\n  console.log(`🚀 Server running on port ${PORT}`);\r\n  console.log('💬 Ready for intelligent module building!');\r\n});\r\n\r\nprocess.on('SIGINT', async () => {\r\n  console.log('\\n🛑 Shutting down...');\r\n  await saveCurrentState();\r\n  console.log('💾 Final state saved');\r\n  process.exit(0);\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}