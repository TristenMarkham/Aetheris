{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._iterSSEMessages = exports.Stream = void 0;\nconst index_1 = require(\"./_shims/index.js\");\nconst error_1 = require(\"./error.js\");\nconst line_1 = require(\"./internal/decoders/line.js\");\nconst stream_utils_1 = require(\"./internal/stream-utils.js\");\nconst core_1 = require(\"./core.js\");\nconst error_2 = require(\"./error.js\");\nclass Stream {\n  constructor(iterator, controller) {\n    this.iterator = iterator;\n    this.controller = controller;\n  }\n  static fromSSEResponse(response, controller) {\n    let consumed = false;\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of _iterSSEMessages(response, controller)) {\n          if (done) continue;\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n          if (sse.event === null || sse.event.startsWith('response.') || sse.event.startsWith('transcript.')) {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            if (data && data.error) {\n              throw new error_2.APIError(undefined, data.error, undefined, (0, core_1.createResponseHeaders)(response.headers));\n            }\n            yield data;\n          } else {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            // TODO: Is this where the error should be thrown?\n            if (sse.event == 'error') {\n              throw new error_2.APIError(undefined, data.error, data.message, undefined);\n            }\n            yield {\n              event: sse.event,\n              data: data\n            };\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream(readableStream, controller) {\n    let consumed = false;\n    async function* iterLines() {\n      const lineDecoder = new line_1.LineDecoder();\n      const iter = (0, stream_utils_1.ReadableStreamToAsyncIterable)(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n    async function* iterator() {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n    return new Stream(iterator, controller);\n  }\n  [Symbol.asyncIterator]() {\n    return this.iterator();\n  }\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee() {\n    const left = [];\n    const right = [];\n    const iterator = this.iterator();\n    const teeIterator = queue => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift();\n        }\n      };\n    };\n    return [new Stream(() => teeIterator(left), this.controller), new Stream(() => teeIterator(right), this.controller)];\n  }\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream() {\n    const self = this;\n    let iter;\n    const encoder = new TextEncoder();\n    return new index_1.ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl) {\n        try {\n          const {\n            value,\n            done\n          } = await iter.next();\n          if (done) return ctrl.close();\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      }\n    });\n  }\n}\nexports.Stream = Stream;\nasync function* _iterSSEMessages(response, controller) {\n  if (!response.body) {\n    controller.abort();\n    throw new error_1.OpenAIError(`Attempted to iterate over a response with no body`);\n  }\n  const sseDecoder = new SSEDecoder();\n  const lineDecoder = new line_1.LineDecoder();\n  const iter = (0, stream_utils_1.ReadableStreamToAsyncIterable)(response.body);\n  for await (const sseChunk of iterSSEChunks(iter)) {\n    for (const line of lineDecoder.decode(sseChunk)) {\n      const sse = sseDecoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n  for (const line of lineDecoder.flush()) {\n    const sse = sseDecoder.decode(line);\n    if (sse) yield sse;\n  }\n}\nexports._iterSSEMessages = _iterSSEMessages;\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator) {\n  let data = new Uint8Array();\n  for await (const chunk of iterator) {\n    if (chunk == null) {\n      continue;\n    }\n    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === 'string' ? new TextEncoder().encode(chunk) : chunk;\n    let newData = new Uint8Array(data.length + binaryChunk.length);\n    newData.set(data);\n    newData.set(binaryChunk, data.length);\n    data = newData;\n    let patternIndex;\n    while ((patternIndex = (0, line_1.findDoubleNewlineIndex)(data)) !== -1) {\n      yield data.slice(0, patternIndex);\n      data = data.slice(patternIndex);\n    }\n  }\n  if (data.length > 0) {\n    yield data;\n  }\n}\nclass SSEDecoder {\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n  decode(line) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n      const sse = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks\n      };\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n      return sse;\n    }\n    this.chunks.push(line);\n    if (line.startsWith(':')) {\n      return null;\n    }\n    let [fieldname, _, value] = partition(line, ':');\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n    return null;\n  }\n}\nfunction partition(str, delimiter) {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n  return [str, '', ''];\n}","map":{"version":3,"names":["index_1","require","error_1","line_1","stream_utils_1","core_1","error_2","Stream","constructor","iterator","controller","fromSSEResponse","response","consumed","Error","done","sse","_iterSSEMessages","data","startsWith","event","JSON","parse","e","console","error","raw","APIError","undefined","createResponseHeaders","headers","message","name","abort","fromReadableStream","readableStream","iterLines","lineDecoder","LineDecoder","iter","ReadableStreamToAsyncIterable","chunk","line","decode","flush","Symbol","asyncIterator","tee","left","right","teeIterator","queue","next","length","result","push","shift","toReadableStream","self","encoder","TextEncoder","ReadableStream","start","pull","ctrl","value","close","bytes","encode","stringify","enqueue","err","cancel","return","exports","body","OpenAIError","sseDecoder","SSEDecoder","sseChunk","iterSSEChunks","Uint8Array","binaryChunk","ArrayBuffer","newData","set","patternIndex","findDoubleNewlineIndex","slice","chunks","endsWith","substring","join","fieldname","_","partition","str","delimiter","index","indexOf"],"sources":["C:\\Users\\onetr\\OneDrive\\Desktop\\universal-business-platform\\node_modules\\openai\\src\\streaming.ts"],"sourcesContent":["import { ReadableStream, type Response } from './_shims/index';\nimport { OpenAIError } from './error';\nimport { findDoubleNewlineIndex, LineDecoder } from './internal/decoders/line';\nimport { ReadableStreamToAsyncIterable } from './internal/stream-utils';\n\nimport { createResponseHeaders } from './core';\nimport { APIError } from './error';\n\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\nexport type ServerSentEvent = {\n  event: string | null;\n  data: string;\n  raw: string[];\n};\n\nexport class Stream<Item> implements AsyncIterable<Item> {\n  controller: AbortController;\n\n  constructor(\n    private iterator: () => AsyncIterator<Item>,\n    controller: AbortController,\n  ) {\n    this.controller = controller;\n  }\n\n  static fromSSEResponse<Item>(response: Response, controller: AbortController): Stream<Item> {\n    let consumed = false;\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const sse of _iterSSEMessages(response, controller)) {\n          if (done) continue;\n\n          if (sse.data.startsWith('[DONE]')) {\n            done = true;\n            continue;\n          }\n\n          if (\n            sse.event === null ||\n            sse.event.startsWith('response.') ||\n            sse.event.startsWith('transcript.')\n          ) {\n            let data;\n\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n\n            if (data && data.error) {\n              throw new APIError(undefined, data.error, undefined, createResponseHeaders(response.headers));\n            }\n\n            yield data;\n          } else {\n            let data;\n            try {\n              data = JSON.parse(sse.data);\n            } catch (e) {\n              console.error(`Could not parse message into JSON:`, sse.data);\n              console.error(`From chunk:`, sse.raw);\n              throw e;\n            }\n            // TODO: Is this where the error should be thrown?\n            if (sse.event == 'error') {\n              throw new APIError(undefined, data.error, data.message, undefined);\n            }\n            yield { event: sse.event, data: data } as any;\n          }\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  /**\n   * Generates a Stream from a newline-separated ReadableStream\n   * where each item is a JSON value.\n   */\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController): Stream<Item> {\n    let consumed = false;\n\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\n      const lineDecoder = new LineDecoder();\n\n      const iter = ReadableStreamToAsyncIterable<Bytes>(readableStream);\n      for await (const chunk of iter) {\n        for (const line of lineDecoder.decode(chunk)) {\n          yield line;\n        }\n      }\n\n      for (const line of lineDecoder.flush()) {\n        yield line;\n      }\n    }\n\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\n      if (consumed) {\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n      }\n      consumed = true;\n      let done = false;\n      try {\n        for await (const line of iterLines()) {\n          if (done) continue;\n          if (line) yield JSON.parse(line);\n        }\n        done = true;\n      } catch (e) {\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\n        if (e instanceof Error && e.name === 'AbortError') return;\n        throw e;\n      } finally {\n        // If the user `break`s, abort the ongoing request.\n        if (!done) controller.abort();\n      }\n    }\n\n    return new Stream(iterator, controller);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\n    return this.iterator();\n  }\n\n  /**\n   * Splits the stream into two streams which can be\n   * independently read from at different speeds.\n   */\n  tee(): [Stream<Item>, Stream<Item>] {\n    const left: Array<Promise<IteratorResult<Item>>> = [];\n    const right: Array<Promise<IteratorResult<Item>>> = [];\n    const iterator = this.iterator();\n\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\n      return {\n        next: () => {\n          if (queue.length === 0) {\n            const result = iterator.next();\n            left.push(result);\n            right.push(result);\n          }\n          return queue.shift()!;\n        },\n      };\n    };\n\n    return [\n      new Stream(() => teeIterator(left), this.controller),\n      new Stream(() => teeIterator(right), this.controller),\n    ];\n  }\n\n  /**\n   * Converts this stream to a newline-separated ReadableStream of\n   * JSON stringified values in the stream\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n   */\n  toReadableStream(): ReadableStream {\n    const self = this;\n    let iter: AsyncIterator<Item>;\n    const encoder = new TextEncoder();\n\n    return new ReadableStream({\n      async start() {\n        iter = self[Symbol.asyncIterator]();\n      },\n      async pull(ctrl: any) {\n        try {\n          const { value, done } = await iter.next();\n          if (done) return ctrl.close();\n\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n\n          ctrl.enqueue(bytes);\n        } catch (err) {\n          ctrl.error(err);\n        }\n      },\n      async cancel() {\n        await iter.return?.();\n      },\n    });\n  }\n}\n\nexport async function* _iterSSEMessages(\n  response: Response,\n  controller: AbortController,\n): AsyncGenerator<ServerSentEvent, void, unknown> {\n  if (!response.body) {\n    controller.abort();\n    throw new OpenAIError(`Attempted to iterate over a response with no body`);\n  }\n\n  const sseDecoder = new SSEDecoder();\n  const lineDecoder = new LineDecoder();\n\n  const iter = ReadableStreamToAsyncIterable<Bytes>(response.body);\n  for await (const sseChunk of iterSSEChunks(iter)) {\n    for (const line of lineDecoder.decode(sseChunk)) {\n      const sse = sseDecoder.decode(line);\n      if (sse) yield sse;\n    }\n  }\n\n  for (const line of lineDecoder.flush()) {\n    const sse = sseDecoder.decode(line);\n    if (sse) yield sse;\n  }\n}\n\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator: AsyncIterableIterator<Bytes>): AsyncGenerator<Uint8Array> {\n  let data = new Uint8Array();\n\n  for await (const chunk of iterator) {\n    if (chunk == null) {\n      continue;\n    }\n\n    const binaryChunk =\n      chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n      : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\n      : chunk;\n\n    let newData = new Uint8Array(data.length + binaryChunk.length);\n    newData.set(data);\n    newData.set(binaryChunk, data.length);\n    data = newData;\n\n    let patternIndex;\n    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n      yield data.slice(0, patternIndex);\n      data = data.slice(patternIndex);\n    }\n  }\n\n  if (data.length > 0) {\n    yield data;\n  }\n}\n\nclass SSEDecoder {\n  private data: string[];\n  private event: string | null;\n  private chunks: string[];\n\n  constructor() {\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n\n  decode(line: string) {\n    if (line.endsWith('\\r')) {\n      line = line.substring(0, line.length - 1);\n    }\n\n    if (!line) {\n      // empty line and we didn't previously encounter any messages\n      if (!this.event && !this.data.length) return null;\n\n      const sse: ServerSentEvent = {\n        event: this.event,\n        data: this.data.join('\\n'),\n        raw: this.chunks,\n      };\n\n      this.event = null;\n      this.data = [];\n      this.chunks = [];\n\n      return sse;\n    }\n\n    this.chunks.push(line);\n\n    if (line.startsWith(':')) {\n      return null;\n    }\n\n    let [fieldname, _, value] = partition(line, ':');\n\n    if (value.startsWith(' ')) {\n      value = value.substring(1);\n    }\n\n    if (fieldname === 'event') {\n      this.event = value;\n    } else if (fieldname === 'data') {\n      this.data.push(value);\n    }\n\n    return null;\n  }\n}\n\nfunction partition(str: string, delimiter: string): [string, string, string] {\n  const index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n\n  return [str, '', ''];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}