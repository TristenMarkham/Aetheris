{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useChat.js\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport apiService from '../services/apiService';\nexport const useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pendingConfirmation, setPendingConfirmation] = useState(null);\n  const [isWaitingForConfirmation, setIsWaitingForConfirmation] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // Load chat history on mount\n  useEffect(() => {\n    const loadChatHistory = async () => {\n      try {\n        const history = await apiService.getChatHistory();\n        setMessages(history);\n      } catch (error) {\n        console.error('Failed to load chat history:', error);\n      }\n    };\n    loadChatHistory();\n  }, []);\n\n  // Send message to chat API\n  const sendMessage = useCallback(async (messageText, isConfirmation = false) => {\n    if (!messageText.trim() && !isConfirmation) return;\n    const userMessage = {\n      role: 'user',\n      content: messageText,\n      timestamp: new Date().toISOString(),\n      id: Date.now()\n    };\n\n    // Add user message to chat immediately\n    if (!isConfirmation) {\n      setMessages(prev => [...prev, userMessage]);\n    }\n    setIsLoading(true);\n    try {\n      const response = await apiService.sendChatMessage(messageText);\n\n      // Handle confirmation requests\n      if (response.requiresConfirmation) {\n        setPendingConfirmation(response.confirmationData);\n        setIsWaitingForConfirmation(true);\n        const confirmationMessage = {\n          role: 'assistant',\n          content: response.message,\n          timestamp: new Date().toISOString(),\n          id: Date.now() + 1,\n          requiresConfirmation: true\n        };\n        setMessages(prev => [...prev, confirmationMessage]);\n      } else {\n        // Regular response\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.message,\n          timestamp: new Date().toISOString(),\n          id: Date.now() + 1\n        };\n        setMessages(prev => [...prev, assistantMessage]);\n\n        // Clear any pending confirmations\n        setPendingConfirmation(null);\n        setIsWaitingForConfirmation(false);\n      }\n    } catch (error) {\n      console.error('Chat error:', error);\n      const errorMessage = {\n        role: 'assistant',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date().toISOString(),\n        id: Date.now() + 1,\n        error: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Handle confirmation responses\n  const handleConfirmation = useCallback(async confirmed => {\n    if (!pendingConfirmation) return;\n    const confirmationText = confirmed ? 'yes' : 'no';\n\n    // Add user's confirmation to chat\n    const confirmationMessage = {\n      role: 'user',\n      content: `Confirmation: ${confirmationText}`,\n      timestamp: new Date().toISOString(),\n      id: Date.now(),\n      isConfirmation: true\n    };\n    setMessages(prev => [...prev, confirmationMessage]);\n\n    // Send confirmation to backend\n    await sendMessage(confirmationText, true);\n\n    // Clear confirmation state\n    setPendingConfirmation(null);\n    setIsWaitingForConfirmation(false);\n  }, [pendingConfirmation, sendMessage]);\n\n  // Cancel pending confirmation\n  const cancelConfirmation = useCallback(() => {\n    setPendingConfirmation(null);\n    setIsWaitingForConfirmation(false);\n    const cancelMessage = {\n      role: 'assistant',\n      content: 'Action cancelled.',\n      timestamp: new Date().toISOString(),\n      id: Date.now()\n    };\n    setMessages(prev => [...prev, cancelMessage]);\n  }, []);\n\n  // Clear chat history\n  const clearChat = useCallback(() => {\n    setMessages([]);\n    setPendingConfirmation(null);\n    setIsWaitingForConfirmation(false);\n  }, []);\n  return {\n    messages,\n    isLoading,\n    pendingConfirmation,\n    isWaitingForConfirmation,\n    messagesEndRef,\n    sendMessage,\n    handleConfirmation,\n    cancelConfirmation,\n    clearChat\n  };\n};\n_s(useChat, \"cqLYo+1sIviVUVJzNXmeDNSoqhU=\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","apiService","useChat","_s","messages","setMessages","isLoading","setIsLoading","pendingConfirmation","setPendingConfirmation","isWaitingForConfirmation","setIsWaitingForConfirmation","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadChatHistory","history","getChatHistory","error","console","sendMessage","messageText","isConfirmation","trim","userMessage","role","content","timestamp","Date","toISOString","id","now","prev","response","sendChatMessage","requiresConfirmation","confirmationData","confirmationMessage","message","assistantMessage","errorMessage","handleConfirmation","confirmed","confirmationText","cancelConfirmation","cancelMessage","clearChat"],"sources":["C:/Users/onetr/OneDrive/Desktop/universal-business-platform/universal-business-platform/frontend/src/hooks/useChat.js"],"sourcesContent":["// src/hooks/useChat.js\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\nimport apiService from '../services/apiService';\r\n\r\nexport const useChat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pendingConfirmation, setPendingConfirmation] = useState(null);\r\n  const [isWaitingForConfirmation, setIsWaitingForConfirmation] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Auto-scroll to bottom when new messages arrive\r\n  const scrollToBottom = useCallback(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, scrollToBottom]);\r\n\r\n  // Load chat history on mount\r\n  useEffect(() => {\r\n    const loadChatHistory = async () => {\r\n      try {\r\n        const history = await apiService.getChatHistory();\r\n        setMessages(history);\r\n      } catch (error) {\r\n        console.error('Failed to load chat history:', error);\r\n      }\r\n    };\r\n    \r\n    loadChatHistory();\r\n  }, []);\r\n\r\n  // Send message to chat API\r\n  const sendMessage = useCallback(async (messageText, isConfirmation = false) => {\r\n    if (!messageText.trim() && !isConfirmation) return;\r\n\r\n    const userMessage = {\r\n      role: 'user',\r\n      content: messageText,\r\n      timestamp: new Date().toISOString(),\r\n      id: Date.now(),\r\n    };\r\n\r\n    // Add user message to chat immediately\r\n    if (!isConfirmation) {\r\n      setMessages(prev => [...prev, userMessage]);\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await apiService.sendChatMessage(messageText);\r\n      \r\n      // Handle confirmation requests\r\n      if (response.requiresConfirmation) {\r\n        setPendingConfirmation(response.confirmationData);\r\n        setIsWaitingForConfirmation(true);\r\n        \r\n        const confirmationMessage = {\r\n          role: 'assistant',\r\n          content: response.message,\r\n          timestamp: new Date().toISOString(),\r\n          id: Date.now() + 1,\r\n          requiresConfirmation: true,\r\n        };\r\n        \r\n        setMessages(prev => [...prev, confirmationMessage]);\r\n      } else {\r\n        // Regular response\r\n        const assistantMessage = {\r\n          role: 'assistant',\r\n          content: response.message,\r\n          timestamp: new Date().toISOString(),\r\n          id: Date.now() + 1,\r\n        };\r\n        \r\n        setMessages(prev => [...prev, assistantMessage]);\r\n        \r\n        // Clear any pending confirmations\r\n        setPendingConfirmation(null);\r\n        setIsWaitingForConfirmation(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Chat error:', error);\r\n      \r\n      const errorMessage = {\r\n        role: 'assistant',\r\n        content: 'Sorry, I encountered an error. Please try again.',\r\n        timestamp: new Date().toISOString(),\r\n        id: Date.now() + 1,\r\n        error: true,\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Handle confirmation responses\r\n  const handleConfirmation = useCallback(async (confirmed) => {\r\n    if (!pendingConfirmation) return;\r\n\r\n    const confirmationText = confirmed ? 'yes' : 'no';\r\n    \r\n    // Add user's confirmation to chat\r\n    const confirmationMessage = {\r\n      role: 'user',\r\n      content: `Confirmation: ${confirmationText}`,\r\n      timestamp: new Date().toISOString(),\r\n      id: Date.now(),\r\n      isConfirmation: true,\r\n    };\r\n    \r\n    setMessages(prev => [...prev, confirmationMessage]);\r\n    \r\n    // Send confirmation to backend\r\n    await sendMessage(confirmationText, true);\r\n    \r\n    // Clear confirmation state\r\n    setPendingConfirmation(null);\r\n    setIsWaitingForConfirmation(false);\r\n  }, [pendingConfirmation, sendMessage]);\r\n\r\n  // Cancel pending confirmation\r\n  const cancelConfirmation = useCallback(() => {\r\n    setPendingConfirmation(null);\r\n    setIsWaitingForConfirmation(false);\r\n    \r\n    const cancelMessage = {\r\n      role: 'assistant',\r\n      content: 'Action cancelled.',\r\n      timestamp: new Date().toISOString(),\r\n      id: Date.now(),\r\n    };\r\n    \r\n    setMessages(prev => [...prev, cancelMessage]);\r\n  }, []);\r\n\r\n  // Clear chat history\r\n  const clearChat = useCallback(() => {\r\n    setMessages([]);\r\n    setPendingConfirmation(null);\r\n    setIsWaitingForConfirmation(false);\r\n  }, []);\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    pendingConfirmation,\r\n    isWaitingForConfirmation,\r\n    messagesEndRef,\r\n    sendMessage,\r\n    handleConfirmation,\r\n    cancelConfirmation,\r\n    clearChat,\r\n  };\r\n}; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}