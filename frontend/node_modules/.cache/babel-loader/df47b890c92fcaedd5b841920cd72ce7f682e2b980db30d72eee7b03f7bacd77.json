{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useChat.js\nimport { useState, useCallback, useRef, useEffect } from 'react';\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3000';\nexport const useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [pendingConfirmation, setPendingConfirmation] = useState(null);\n  const [isWaitingForConfirmation, setIsWaitingForConfirmation] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // Load chat history on mount\n  useEffect(() => {\n    const loadChatHistory = async () => {\n      try {\n        console.log('🔄 Loading chat history...');\n        const response = await fetch(`${API_BASE}/api/chat/history`);\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        const history = await response.json();\n        console.log('📜 Chat history loaded:', history.length, 'messages');\n\n        // Transform backend format to frontend format\n        const transformedHistory = Array.isArray(history) ? history.map(msg => ({\n          role: msg.sender === 'user' ? 'user' : 'assistant',\n          content: msg.message || '',\n          timestamp: msg.timestamp,\n          id: msg.id || Date.now() + Math.random(),\n          sender: msg.sender // Keep original sender info for compatibility\n        })) : [];\n        setMessages(transformedHistory);\n        console.log('✅ Chat history transformed and loaded:', transformedHistory.length, 'messages');\n      } catch (error) {\n        console.error('❌ Failed to load chat history:', error);\n        setMessages([]); // Set to empty array on error\n      }\n    };\n    loadChatHistory();\n  }, []);\n\n  // Send message to chat API\n  const sendMessage = useCallback(async (messageText, isConfirmation = false) => {\n    if (!messageText.trim() && !isConfirmation) return;\n    console.log('📤 Sending message:', messageText);\n    const userMessage = {\n      role: 'user',\n      content: messageText,\n      timestamp: new Date().toISOString(),\n      id: Date.now(),\n      sender: 'user'\n    };\n\n    // Add user message to chat immediately\n    if (!isConfirmation) {\n      setMessages(prev => [...prev, userMessage]);\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE}/api/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: messageText,\n          userId: 'tristen',\n          companyId: 'Markham Investigation & Protection'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const result = await response.json();\n      console.log('📥 Chat response:', result);\n\n      // Handle confirmation requests\n      if (result.requiresConfirmation) {\n        setPendingConfirmation(result.confirmationData);\n        setIsWaitingForConfirmation(true);\n        const confirmationMessage = {\n          role: 'assistant',\n          content: result.message,\n          timestamp: new Date().toISOString(),\n          id: Date.now() + 1,\n          requiresConfirmation: true,\n          sender: 'aetheris'\n        };\n        setMessages(prev => [...prev, confirmationMessage]);\n      } else {\n        // Regular response\n        const assistantMessage = {\n          role: 'assistant',\n          content: result.message || 'No response received',\n          timestamp: result.timestamp || new Date().toISOString(),\n          id: Date.now() + 1,\n          sender: 'aetheris'\n        };\n        setMessages(prev => [...prev, assistantMessage]);\n\n        // Clear any pending confirmations\n        setPendingConfirmation(null);\n        setIsWaitingForConfirmation(false);\n      }\n    } catch (error) {\n      console.error('❌ Chat error:', error);\n      const errorMessage = {\n        role: 'assistant',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date().toISOString(),\n        id: Date.now() + 1,\n        error: true,\n        sender: 'aetheris'\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Handle confirmation responses\n  const handleConfirmation = useCallback(async confirmed => {\n    if (!pendingConfirmation) return;\n    const confirmationText = confirmed ? 'yes' : 'no';\n\n    // Add user's confirmation to chat\n    const confirmationMessage = {\n      role: 'user',\n      content: `Confirmation: ${confirmationText}`,\n      timestamp: new Date().toISOString(),\n      id: Date.now(),\n      isConfirmation: true,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, confirmationMessage]);\n\n    // Send confirmation to backend\n    await sendMessage(confirmationText, true);\n\n    // Clear confirmation state\n    setPendingConfirmation(null);\n    setIsWaitingForConfirmation(false);\n  }, [pendingConfirmation, sendMessage]);\n\n  // Cancel pending confirmation\n  const cancelConfirmation = useCallback(() => {\n    setPendingConfirmation(null);\n    setIsWaitingForConfirmation(false);\n    const cancelMessage = {\n      role: 'assistant',\n      content: 'Action cancelled.',\n      timestamp: new Date().toISOString(),\n      id: Date.now(),\n      sender: 'aetheris'\n    };\n    setMessages(prev => [...prev, cancelMessage]);\n  }, []);\n\n  // Clear chat history\n  const clearChat = useCallback(() => {\n    setMessages([]);\n    setPendingConfirmation(null);\n    setIsWaitingForConfirmation(false);\n  }, []);\n  return {\n    messages,\n    isLoading,\n    pendingConfirmation,\n    isWaitingForConfirmation,\n    messagesEndRef,\n    sendMessage,\n    handleConfirmation,\n    cancelConfirmation,\n    clearChat\n  };\n};\n_s(useChat, \"cqLYo+1sIviVUVJzNXmeDNSoqhU=\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","API_BASE","process","env","REACT_APP_API_URL","useChat","_s","messages","setMessages","isLoading","setIsLoading","pendingConfirmation","setPendingConfirmation","isWaitingForConfirmation","setIsWaitingForConfirmation","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","loadChatHistory","console","log","response","fetch","ok","Error","status","statusText","history","json","length","transformedHistory","Array","isArray","map","msg","role","sender","content","message","timestamp","id","Date","now","Math","random","error","sendMessage","messageText","isConfirmation","trim","userMessage","toISOString","prev","method","headers","body","JSON","stringify","userId","companyId","result","requiresConfirmation","confirmationData","confirmationMessage","assistantMessage","errorMessage","handleConfirmation","confirmed","confirmationText","cancelConfirmation","cancelMessage","clearChat"],"sources":["C:/Users/onetr/OneDrive/Desktop/universal-business-platform/universal-business-platform/frontend/src/hooks/useChat.js"],"sourcesContent":["// src/hooks/useChat.js\r\nimport { useState, useCallback, useRef, useEffect } from 'react';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3000';\r\n\r\nexport const useChat = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pendingConfirmation, setPendingConfirmation] = useState(null);\r\n  const [isWaitingForConfirmation, setIsWaitingForConfirmation] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Auto-scroll to bottom when new messages arrive\r\n  const scrollToBottom = useCallback(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, scrollToBottom]);\r\n\r\n  // Load chat history on mount\r\n  useEffect(() => {\r\n    const loadChatHistory = async () => {\r\n      try {\r\n        console.log('🔄 Loading chat history...');\r\n        const response = await fetch(`${API_BASE}/api/chat/history`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n        }\r\n        \r\n        const history = await response.json();\r\n        console.log('📜 Chat history loaded:', history.length, 'messages');\r\n        \r\n        // Transform backend format to frontend format\r\n        const transformedHistory = Array.isArray(history) ? history.map(msg => ({\r\n          role: msg.sender === 'user' ? 'user' : 'assistant',\r\n          content: msg.message || '',\r\n          timestamp: msg.timestamp,\r\n          id: msg.id || Date.now() + Math.random(),\r\n          sender: msg.sender // Keep original sender info for compatibility\r\n        })) : [];\r\n        \r\n        setMessages(transformedHistory);\r\n        console.log('✅ Chat history transformed and loaded:', transformedHistory.length, 'messages');\r\n      } catch (error) {\r\n        console.error('❌ Failed to load chat history:', error);\r\n        setMessages([]); // Set to empty array on error\r\n      }\r\n    };\r\n    \r\n    loadChatHistory();\r\n  }, []);\r\n\r\n  // Send message to chat API\r\n  const sendMessage = useCallback(async (messageText, isConfirmation = false) => {\r\n    if (!messageText.trim() && !isConfirmation) return;\r\n\r\n    console.log('📤 Sending message:', messageText);\r\n\r\n    const userMessage = {\r\n      role: 'user',\r\n      content: messageText,\r\n      timestamp: new Date().toISOString(),\r\n      id: Date.now(),\r\n      sender: 'user'\r\n    };\r\n\r\n    // Add user message to chat immediately\r\n    if (!isConfirmation) {\r\n      setMessages(prev => [...prev, userMessage]);\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE}/api/chat`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          message: messageText,\r\n          userId: 'tristen',\r\n          companyId: 'Markham Investigation & Protection'\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('📥 Chat response:', result);\r\n      \r\n      // Handle confirmation requests\r\n      if (result.requiresConfirmation) {\r\n        setPendingConfirmation(result.confirmationData);\r\n        setIsWaitingForConfirmation(true);\r\n        \r\n        const confirmationMessage = {\r\n          role: 'assistant',\r\n          content: result.message,\r\n          timestamp: new Date().toISOString(),\r\n          id: Date.now() + 1,\r\n          requiresConfirmation: true,\r\n          sender: 'aetheris'\r\n        };\r\n        \r\n        setMessages(prev => [...prev, confirmationMessage]);\r\n      } else {\r\n        // Regular response\r\n        const assistantMessage = {\r\n          role: 'assistant',\r\n          content: result.message || 'No response received',\r\n          timestamp: result.timestamp || new Date().toISOString(),\r\n          id: Date.now() + 1,\r\n          sender: 'aetheris'\r\n        };\r\n        \r\n        setMessages(prev => [...prev, assistantMessage]);\r\n        \r\n        // Clear any pending confirmations\r\n        setPendingConfirmation(null);\r\n        setIsWaitingForConfirmation(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Chat error:', error);\r\n      \r\n      const errorMessage = {\r\n        role: 'assistant',\r\n        content: 'Sorry, I encountered an error. Please try again.',\r\n        timestamp: new Date().toISOString(),\r\n        id: Date.now() + 1,\r\n        error: true,\r\n        sender: 'aetheris'\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Handle confirmation responses\r\n  const handleConfirmation = useCallback(async (confirmed) => {\r\n    if (!pendingConfirmation) return;\r\n\r\n    const confirmationText = confirmed ? 'yes' : 'no';\r\n    \r\n    // Add user's confirmation to chat\r\n    const confirmationMessage = {\r\n      role: 'user',\r\n      content: `Confirmation: ${confirmationText}`,\r\n      timestamp: new Date().toISOString(),\r\n      id: Date.now(),\r\n      isConfirmation: true,\r\n      sender: 'user'\r\n    };\r\n    \r\n    setMessages(prev => [...prev, confirmationMessage]);\r\n    \r\n    // Send confirmation to backend\r\n    await sendMessage(confirmationText, true);\r\n    \r\n    // Clear confirmation state\r\n    setPendingConfirmation(null);\r\n    setIsWaitingForConfirmation(false);\r\n  }, [pendingConfirmation, sendMessage]);\r\n\r\n  // Cancel pending confirmation\r\n  const cancelConfirmation = useCallback(() => {\r\n    setPendingConfirmation(null);\r\n    setIsWaitingForConfirmation(false);\r\n    \r\n    const cancelMessage = {\r\n      role: 'assistant',\r\n      content: 'Action cancelled.',\r\n      timestamp: new Date().toISOString(),\r\n      id: Date.now(),\r\n      sender: 'aetheris'\r\n    };\r\n    \r\n    setMessages(prev => [...prev, cancelMessage]);\r\n  }, []);\r\n\r\n  // Clear chat history\r\n  const clearChat = useCallback(() => {\r\n    setMessages([]);\r\n    setPendingConfirmation(null);\r\n    setIsWaitingForConfirmation(false);\r\n  }, []);\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    pendingConfirmation,\r\n    isWaitingForConfirmation,\r\n    messagesEndRef,\r\n    sendMessage,\r\n    handleConfirmation,\r\n    cancelConfirmation,\r\n    clearChat,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}