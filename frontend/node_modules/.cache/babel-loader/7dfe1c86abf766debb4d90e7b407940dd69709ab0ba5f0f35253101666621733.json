{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useBusinessData.js\nimport { useState, useEffect, useCallback } from 'react';\nimport apiService from '../services/apiService';\nexport const useBusinessData = () => {\n  _s();\n  const [businessData, setBusinessData] = useState({\n    employees: [],\n    modules: [],\n    analytics: null,\n    metrics: null\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  // Load all business data\n  const loadBusinessData = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const [employees, modules, analytics, metrics] = await Promise.all([apiService.getEmployees(), apiService.getModules(), apiService.getAnalytics(), apiService.getPerformanceMetrics()]);\n      setBusinessData({\n        employees,\n        modules,\n        analytics,\n        metrics\n      });\n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Failed to load business data:', err);\n      setError('Failed to load business data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Load data on mount\n  useEffect(() => {\n    loadBusinessData();\n  }, [loadBusinessData]);\n\n  // Employee management\n  const addEmployee = useCallback(async employeeData => {\n    try {\n      const newEmployee = await apiService.createEmployee(employeeData);\n      setBusinessData(prev => ({\n        ...prev,\n        employees: [...prev.employees, newEmployee]\n      }));\n      return newEmployee;\n    } catch (error) {\n      console.error('Failed to add employee:', error);\n      throw error;\n    }\n  }, []);\n  const updateEmployee = useCallback(async (id, employeeData) => {\n    try {\n      const updatedEmployee = await apiService.updateEmployee(id, employeeData);\n      setBusinessData(prev => ({\n        ...prev,\n        employees: prev.employees.map(emp => emp._id === id ? updatedEmployee : emp)\n      }));\n      return updatedEmployee;\n    } catch (error) {\n      console.error('Failed to update employee:', error);\n      throw error;\n    }\n  }, []);\n  const deleteEmployee = useCallback(async id => {\n    try {\n      await apiService.deleteEmployee(id);\n      setBusinessData(prev => ({\n        ...prev,\n        employees: prev.employees.filter(emp => emp._id !== id)\n      }));\n    } catch (error) {\n      console.error('Failed to delete employee:', error);\n      throw error;\n    }\n  }, []);\n\n  // Module management\n  const addModule = useCallback(async moduleData => {\n    try {\n      const newModule = await apiService.createModule(moduleData);\n      setBusinessData(prev => ({\n        ...prev,\n        modules: [...prev.modules, newModule]\n      }));\n      return newModule;\n    } catch (error) {\n      console.error('Failed to add module:', error);\n      throw error;\n    }\n  }, []);\n  const deleteModule = useCallback(async id => {\n    try {\n      await apiService.deleteModule(id);\n      setBusinessData(prev => ({\n        ...prev,\n        modules: prev.modules.filter(mod => mod._id !== id)\n      }));\n    } catch (error) {\n      console.error('Failed to delete module:', error);\n      throw error;\n    }\n  }, []);\n\n  // Refresh data\n  const refreshData = useCallback(() => {\n    return loadBusinessData();\n  }, [loadBusinessData]);\n\n  // Get specific data subsets\n  const getEmployeeById = useCallback(id => {\n    return businessData.employees.find(emp => emp._id === id);\n  }, [businessData.employees]);\n  const getModuleById = useCallback(id => {\n    return businessData.modules.find(mod => mod._id === id);\n  }, [businessData.modules]);\n\n  // Calculate derived metrics\n  const derivedMetrics = {\n    totalEmployees: (businessData.employees || []).length,\n    totalModules: (businessData.modules || []).length,\n    activeEmployees: (businessData.employees || []).filter(emp => emp.status === 'active').length,\n    recentHires: (businessData.employees || []).filter(emp => {\n      if (!emp.hireDate) return false;\n      const hireDate = new Date(emp.hireDate);\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      return hireDate > thirtyDaysAgo;\n    }).length\n  };\n  return {\n    businessData,\n    isLoading,\n    error,\n    lastUpdated,\n    derivedMetrics,\n    // Actions\n    refreshData,\n    addEmployee,\n    updateEmployee,\n    deleteEmployee,\n    addModule,\n    deleteModule,\n    // Getters\n    getEmployeeById,\n    getModuleById\n  };\n};\n_s(useBusinessData, \"1rXSwx81RNy7j3Q6uWi8NIl2coA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","apiService","useBusinessData","_s","businessData","setBusinessData","employees","modules","analytics","metrics","isLoading","setIsLoading","error","setError","lastUpdated","setLastUpdated","loadBusinessData","Promise","all","getEmployees","getModules","getAnalytics","getPerformanceMetrics","Date","err","console","addEmployee","employeeData","newEmployee","createEmployee","prev","updateEmployee","id","updatedEmployee","map","emp","_id","deleteEmployee","filter","addModule","moduleData","newModule","createModule","deleteModule","mod","refreshData","getEmployeeById","find","getModuleById","derivedMetrics","totalEmployees","length","totalModules","activeEmployees","status","recentHires","hireDate","thirtyDaysAgo","setDate","getDate"],"sources":["C:/Users/onetr/OneDrive/Desktop/universal-business-platform/universal-business-platform/frontend/src/hooks/useBusinessData.js"],"sourcesContent":["// src/hooks/useBusinessData.js\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport apiService from '../services/apiService';\r\n\r\nexport const useBusinessData = () => {\r\n  const [businessData, setBusinessData] = useState({\r\n    employees: [],\r\n    modules: [],\r\n    analytics: null,\r\n    metrics: null,\r\n  });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n  // Load all business data\r\n  const loadBusinessData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const [employees, modules, analytics, metrics] = await Promise.all([\r\n        apiService.getEmployees(),\r\n        apiService.getModules(),\r\n        apiService.getAnalytics(),\r\n        apiService.getPerformanceMetrics(),\r\n      ]);\r\n\r\n      setBusinessData({\r\n        employees,\r\n        modules,\r\n        analytics,\r\n        metrics,\r\n      });\r\n      \r\n      setLastUpdated(new Date());\r\n    } catch (err) {\r\n      console.error('Failed to load business data:', err);\r\n      setError('Failed to load business data. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Load data on mount\r\n  useEffect(() => {\r\n    loadBusinessData();\r\n  }, [loadBusinessData]);\r\n\r\n  // Employee management\r\n  const addEmployee = useCallback(async (employeeData) => {\r\n    try {\r\n      const newEmployee = await apiService.createEmployee(employeeData);\r\n      setBusinessData(prev => ({\r\n        ...prev,\r\n        employees: [...prev.employees, newEmployee],\r\n      }));\r\n      return newEmployee;\r\n    } catch (error) {\r\n      console.error('Failed to add employee:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  const updateEmployee = useCallback(async (id, employeeData) => {\r\n    try {\r\n      const updatedEmployee = await apiService.updateEmployee(id, employeeData);\r\n      setBusinessData(prev => ({\r\n        ...prev,\r\n        employees: prev.employees.map(emp => \r\n          emp._id === id ? updatedEmployee : emp\r\n        ),\r\n      }));\r\n      return updatedEmployee;\r\n    } catch (error) {\r\n      console.error('Failed to update employee:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  const deleteEmployee = useCallback(async (id) => {\r\n    try {\r\n      await apiService.deleteEmployee(id);\r\n      setBusinessData(prev => ({\r\n        ...prev,\r\n        employees: prev.employees.filter(emp => emp._id !== id),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to delete employee:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // Module management\r\n  const addModule = useCallback(async (moduleData) => {\r\n    try {\r\n      const newModule = await apiService.createModule(moduleData);\r\n      setBusinessData(prev => ({\r\n        ...prev,\r\n        modules: [...prev.modules, newModule],\r\n      }));\r\n      return newModule;\r\n    } catch (error) {\r\n      console.error('Failed to add module:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  const deleteModule = useCallback(async (id) => {\r\n    try {\r\n      await apiService.deleteModule(id);\r\n      setBusinessData(prev => ({\r\n        ...prev,\r\n        modules: prev.modules.filter(mod => mod._id !== id),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to delete module:', error);\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // Refresh data\r\n  const refreshData = useCallback(() => {\r\n    return loadBusinessData();\r\n  }, [loadBusinessData]);\r\n\r\n  // Get specific data subsets\r\n  const getEmployeeById = useCallback((id) => {\r\n    return businessData.employees.find(emp => emp._id === id);\r\n  }, [businessData.employees]);\r\n\r\n  const getModuleById = useCallback((id) => {\r\n    return businessData.modules.find(mod => mod._id === id);\r\n  }, [businessData.modules]);\r\n\r\n  // Calculate derived metrics\r\nconst derivedMetrics = {\r\n  totalEmployees: (businessData.employees || []).length,\r\n  totalModules: (businessData.modules || []).length,\r\n  activeEmployees: (businessData.employees || []).filter(emp => emp.status === 'active').length,\r\n  recentHires: (businessData.employees || []).filter(emp => {\r\n    if (!emp.hireDate) return false;\r\n    const hireDate = new Date(emp.hireDate);\r\n    const thirtyDaysAgo = new Date();\r\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n    return hireDate > thirtyDaysAgo;\r\n  }).length,\r\n};\r\n\r\n  return {\r\n    businessData,\r\n    isLoading,\r\n    error,\r\n    lastUpdated,\r\n    derivedMetrics,\r\n    // Actions\r\n    refreshData,\r\n    addEmployee,\r\n    updateEmployee,\r\n    deleteEmployee,\r\n    addModule,\r\n    deleteModule,\r\n    // Getters\r\n    getEmployeeById,\r\n    getModuleById,\r\n  };\r\n}; \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}